<?xml version="1.0"?>

<project basedir="." name="portal-test-local" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-test.xml" />

	<macrodef name="clean-bundles-backup-properties">
		<sequential>
			<replaceregexp
				file="test.${user.name}.properties"
				match="(\n).*## Autogenerated Bundles Backup Properties(.*\n)+## Autogenerated Bundles Backup Properties.*\r?\n"
				replace=""
			/>
		</sequential>
	</macrodef>

	<macrodef name="get-backend-test-paths">
		<sequential>
			<if>
				<not>
					<contains string="${test.class}" substring="com.liferay." />
				</not>
				<then>
					<fail message="Please set -Dtest.class= to full test class package name. e.g. -Dtest.class=com.liferay.address.service.test.AddressLocalServiceTest" />
				</then>
			</if>

			<propertyregex
				global="true"
				input="${test.class}"
				property="test.package.dir"
				regexp="\."
				replace="/"
			/>

			<first id="first">
				<fileset
					dir="${project.dir}/modules"
					includes="**/${test.package.dir}*.java"
				/>
			</first>

			<var name="test.class.file.path" value="${toString:first}" />

			<propertyregex
				input="${test.class.file.path}"
				property="test.class.root.dir"
				regexp="(.+)(src\/test)(.+)"
				replace="\1"
			/>

			<propertyregex
				input="${test.class}"
				property="test.class.name"
				regexp="([^\.]+$)"
				select="\1"
			/>
		</sequential>
	</macrodef>

	<target name="build-dxp">
		<antcall inheritAll="false" target="setup-profile-dxp" />

		<antcall target="all" />

		<antcall target="create-bundles-backup" />
	</target>

	<target name="create-bundles-backup">
		<clean-bundles-backup-properties />

		<basename file="${app.server.parent.dir}" property="app.server.parent.dir.name" />

		<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.rev.parse">
			<arg line="rev-parse HEAD" />
		</exec>

		<property location="${app.server.parent.dir}/../" name="liferay.home.parent.dir" />

		<echo>Creating backup of ${app.server.parent.dir.name} directory at ${liferay.home.parent.dir}/bundles-master-${git.commit.portal.rev.parse}.tar.gz.</echo>

		<exec dir="${liferay.home.parent.dir}" executable="tar" failonerror="true">
			<arg value="-czf" />
			<arg value="${liferay.home.parent.dir}/bundles-master-${git.commit.portal.rev.parse}.tar.gz" />
			<arg value="${app.server.parent.dir.name}" />
		</exec>

		<echo append="true" file="test.${user.name}.properties"><![CDATA[
## Autogenerated Bundles Backup Properties
local.bundles.backup.file=${liferay.home.parent.dir}/bundles-master-${git.commit.portal.rev.parse}.tar.gz
## Autogenerated Bundles Backup Properties
]]></echo>
	</target>

	<target name="database-reset">
		<antcall target="start-docker-database-${database.type}" />
	</target>

	<target name="fetch-pull-request">
		<if>
			<not>
				<matches pattern="https?://" string="${pull.request.url}" />
			</not>
			<then>
				<fail message="Please set -Dpull.request.url= to URL of the Pull Request when calling this target." />
			</then>
		</if>

		<propertyregex
			input="${pull.request.url}"
			property="pull.request.number"
			regexp="(.+github\.com\/)(.*)(\/liferay\-portal\/pull\/)([0-9]+)"
			replace="\4"
		/>

		<propertyregex
			input="${pull.request.url}"
			property="pull.request.username"
			regexp="(.+github\.com\/)(.*)(\/liferay\-portal\/pull\/)([0-9]+)"
			replace="\2"
		/>

		<exec executable="git" failonerror="true">
			<arg value="fetch" />
			<arg value="https://github.com/${pull.request.username}/liferay-portal" />
			<arg value="pull/${pull.request.number}/head:master-${pull.request.username}-${pull.request.number}" />
		</exec>

		<exec executable="git" failonerror="true">
			<arg value="checkout" />
			<arg value="master-${pull.request.username}-${pull.request.number}" />
		</exec>
	</target>

	<target name="restore-bundles-backup">
		<if>
			<not>
				<isset property="local.bundles.backup.file" />
			</not>
			<then>
				<fail message="Please set local.bundles.backup.file property in test.${user.name}.properties to the full file path of the local tar.gz backup file." />
			</then>
		</if>

		<delete dir="${app.server.parent.dir}" />

		<dirname file="${local.bundles.backup.file}" property="bundles.backup.parent.dir" />

		<exec dir="${bundles.backup.parent.dir}" executable="tar" failonerror="true">
			<arg value="-xf" />
			<arg value="${local.bundles.backup.file}" />
		</exec>

		<if>
			<not>
				<available file="${app.server.parent.dir}" type="dir" />
			</not>
			<then>
				<fail message="Backup restored to ${bundles.backup.parent.dir} but app.server.parent.dir was not found. Please check that app.server.parent.dir matches the bundle location." />
			</then>
		</if>
	</target>

	<target name="run-integration-test">
		<get-backend-test-paths />

		<gradle-execute dir="${test.class.root.dir}" task="testIntegration">
			<arg value="testIntegration" />
			<arg value="--tests" />
			<arg value="${test.class.name}" />
		</gradle-execute>
	</target>

	<target name="run-poshi-test">
		<antcall target="run-selenium-test" />
	</target>

	<target name="run-poshi-tomcat">
		<antcall inheritAll="false" target="clean-up-java-processes" />

		<if>
			<equals arg1="${restore.local.bundles}" arg2="true" />
			<then>
				<antcall target="restore-bundles-backup" />
			</then>
		</if>

		<ant antfile="build-test-tomcat-${database.type}.xml" target="run-selenium-tomcat-${database.type}">
			<property name="test.class" value="${test.class}" />
		</ant>
	</target>

	<target name="run-unit-test">
		<get-backend-test-paths />

		<gradle-execute dir="${test.class.root.dir}" task="testIntegration">
			<arg value="test" />
			<arg value="--tests" />
			<arg value="${test.class.name}" />
		</gradle-execute>
	</target>

	<target name="setup-release-bundle">
		<if>
			<not>
				<isset property="local.bundles.release.file" />
			</not>
			<then>
				<fail message="Please set local.bundles.release.file property in test.${user.name}.properties file to the full file path of the local tar.gz release file." />
			</then>
			<elseif>
				<not>
					<isset property="local.bundles.release.dir.name" />
				</not>
				<then>
					<fail message="Please set local.bundles.release.dir.name property in test.${user.name}.properties to the directory name of the release." />
				</then>
			</elseif>
			<elseif>
				<not>
					<isset property="local.bundles.release.license.file" />
				</not>
				<then>
					<fail message="Please set local.bundles.release.license.file property in test.${user.name}.properties file to the full file path of the local license xml file." />
				</then>
			</elseif>
		</if>

		<delete dir="${app.server.parent.dir}" />

		<dirname file="${local.bundles.release.file}" property="bundles.release.parent.dir" />

		<delete dir="${bundles.release.parent.dir}/${local.bundles.release.dir.name}" />

		<exec dir="${bundles.release.parent.dir}" executable="tar" failonerror="true">
			<arg value="-xf" />
			<arg value="${local.bundles.release.file}" />
		</exec>

		<move
			file="${bundles.release.parent.dir}/${local.bundles.release.dir.name}"
			tofile="${app.server.parent.dir}"
		/>

		<mkdir dir="${app.server.parent.dir}/deploy" />

		<copy
			file="${local.bundles.release.license.file}"
			todir="${app.server.parent.dir}/deploy/"
			verbose="true"
		/>

		<if>
			<not>
				<available file="${app.server.parent.dir}" type="dir" />
			</not>
			<then>
				<fail message="Backup restored to ${bundles.release.parent.dir} but app.server.parent.dir was not found. Please check that app.server.parent.dir matches the bundle location." />
			</then>
		</if>

		<antcall inheritAll="false" target="clean-up-database-properties" />

		<antcall inheritAll="false" target="start-docker-database-${database.type}">
			<param name="skip.property.cleanup" value="true" />
		</antcall>
	</target>
</project>