@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Create DXP Site with Commerce") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium Demo");
		}

		task ("Connect the DXP to AC and finish the setup wizard") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(channelName = "Minium Demo Portal");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.tearDownNonDefaultGroups();

			CommerceJSONChannelsAPI._deleteAllCommerceChannels();
		}
	}

	@description = "Story: LRAC-11044 | Automation ID: LRAC-12676 | Test Summary: Check that you can modify the sites and channels synchronized in the property review sidebar"
	@priority = "4"
	test CanModifySitesAndChannelsSyncInPropertyReviewSidebar {
		var newChannelName1 = "AC";
		var newChannelName2 = "DXP";

		task ("Create two new channels") {
			for (var channelName : list "${newChannelName1},${newChannelName2}") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "${channelName}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Check that the number of channels and sites matches the selected ones") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "1",
				syncedSitesNumber = "2");
		}

		task ("Assign channels to the property") {
			for (var channelName : list "${newChannelName1},${newChannelName2}") {
				ACDXPSettings.syncChannel(
					channelName = "${channelName}",
					propertyName = "${assignedPropertyName}");
			}
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(
				propertyName = "${assignedPropertyName}",
				siteName = "Site Name");
		}

		task ("Check that the number of channels and sites matches the selected ones") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "3",
				syncedSitesNumber = "3");
		}
	}

	@description = "Story: LRAC-11044 | Automation ID: LRAC-12677 | Test Summary: Check that you can modify the sync of contacts in the people review sidebar"
	@priority = "4"
	test CanModifyContactsSyncInPeopleReviewSidebar {
		task ("Go to the people page in the sidebar") {
			ACDXPSettings.navToSyncedContactDataMenu();
		}

		task ("Disable toggle to sync contacts and accounts") {
			Check.checkToggleSwitch(locator1 = "ACUtils#TOGGLE_ICON");
		}

		task ("Enable toggle to sync contacts") {
			ACDXPSettings.syncContactsData();
		}

		task ("Sync a account group") {
			ACDXPSettings.syncAccountsData(accountGroup = "European Accounts");
		}

		task ("Refresh the page and Go to the people page in the sidebar") {
			TestUtils.hardRefresh();

			ACDXPSettings.navToSyncedContactDataMenu();
		}

		task ("Check that only sync contacts toggle is enable") {
			for (var syncFieldName : list "Sync All Contacts and Accounts,Sync All Accounts") {
				AssertNotChecked.assertNotCheckedNotVisible(
					key_syncFieldName = "${syncFieldName}",
					locator1 = "ACDXPSettings#SYNC_TOGGLE_ICON");
			}

			AssertChecked.assertCheckedNotVisible(
				key_syncFieldName = "Sync All Contacts",
				locator1 = "ACDXPSettings#SYNC_TOGGLE_ICON");
		}

		task ("Check selected account group number") {
			Click(
				key_panel = "Select Accounts",
				locator1 = "Panel#PANEL_COLLAPSED");

			ACDXPSettings.viewSyncNumberPreview(
				syncFieldName = "Account Groups",
				syncNumber = "1 Selected");
		}

		task ("Sync a account group") {
			ACDXPSettings.syncAccountsData(accountGroup = "North American Accounts");
		}

		task ("Check selected account group number") {
			ACDXPSettings.viewSyncNumberPreview(
				syncFieldName = "Account Groups",
				syncNumber = "2 Selected");
		}
	}

}