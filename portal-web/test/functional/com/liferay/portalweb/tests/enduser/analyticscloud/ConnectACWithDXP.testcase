@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story: LRAC-11860 | Automation ID: LRAC-12437 | Test Summary: Empty state of connection screen"
	@priority = "3"
	test CheckConnectionEmptyStateMessage {
		task ("Go to Instance Settings > Analytics Cloud") {
			ACDXPSettings.goToInstanceSettingsAC();
		}

		task ("Check that there is no token in the field") {
			AssertTextEquals(
				locator1 = "ACDXPSettings#TOKEN_INPUT_FIELD",
				value1 = "");
		}

		task ("Check that the connect button is disabled") {
			AssertElementPresent(locator1 = "ACDXPSettings#CONNECT_BUTTON_DISABLED");
		}
	}

	@description = "Story: LRAC-11860 | Automation ID: LRAC-12438 | Test Summary: Connect AC Token Authentication Passes"
	@priority = "5"
	test CheckIsPossibleConnectACWithValidToken {
		property portal.release = "true";

		task ("Connect AC with DXP") {
			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Check that the connection was successful") {
			ACDXPSettings.assertSuccessfulConnection();
		}
	}

	@description = "Story: LRAC-11860 | Automation ID: LRAC-12440 | Test Summary: Connect AC Token Authentication Fails"
	@priority = "5"
	test CheckUnableConnectACWithInvalidToken {
		task ("Go to Instance Settings > Analytics Cloud") {
			ACDXPSettings.goToInstanceSettingsAC();
		}

		task ("Try connecting with an invalid token") {
			Click(locator1 = "ACDXPSettings#TOKEN_INPUT_FIELD");

			Type(
				locator1 = "ACDXPSettings#TOKEN_INPUT_FIELD",
				value1 = "InvalidTokenAC");

			Click(locator1 = "ACDXPSettings#CONNECT_DISCONNECT_BUTTON");
		}

		task ("Check that the connection is not made and an error message appears") {
			ACDXPSettings.NavigateBetweenWizardSteps(wizardStepName = "Connect");

			AssertElementNotPresent(locator1 = "Message#SUCCESS");

			Alert.viewErrorMessage(errorMessage = "An unexpected system error occurred.");
		}
	}

	@description = "Validate if the user can connect AC to DXP"
	@priority = "5"
	test ConnectACToDXPAndSyncSitesAndContacts {
		property portal.release = "true";

		// Maybe this test will be covered by another one in the future of new stories

		ACDXPSettings.connectDXPtoAnalyticsCloud();
	}

}