@component-name = "portal-frontend-infrastructure"
definition {

	property custom.properties = "feature.flag.LPS-164563=true";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Dataset";
	property testray.main.component.name = "Frontend Dataset";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given creating a Data Set via API") {
			FrontendDataSetAdmin.goToDatasetAdminPage();

			FrontendDataSetAdmin.createDatasetEntryViaAPI(
				datasetName = "Dataset Fields Test",
				restApplication = "/c/fdsfields",
				restEndpoint = "/",
				restSchema = "FDSField");
		}

		task ("And a dataset view created via api") {
			FrontendDataSetAdmin.createFDSViewViaAPI(
				datasetName = "Dataset Fields Test",
				dataSetViewDescription = "FDSViewDescription",
				key_dataSetViewNameList = "View Fields Test");
		}

		task ("When go to the View page of the dataset created.") {
			FrontendDataSetAdmin.goToSpecificViewPage(
				datasetName = "Dataset Fields Test",
				key_viewName = "View Fields Test");
		}

		task ("When goes to Fields Tab.") {
			FrontendDataSetAdmin.goToTab(tabName = "Fields");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		FrontendDataSetAdmin.deleteAllDatasetEntries();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-179282. Confirm that metadata fields are not present for the user "
	@priority = 3
	test AssertNotPresentMetadataFields {
		task ("And Clicking to Add a new field") {
			LexiconEntry.gotoAdd();
		}

		task ("Then Confirm the fields are visible and present: creator,name,id") {
			AssertElementPresent(
				key_name = "name",
				locator1 = "FrontendDataSetAdmin#FIELDS_ITEM");

			AssertElementPresent(
				key_name = "creator",
				locator1 = "FrontendDataSetAdmin#FIELDS_ITEM");

			AssertElementPresent(
				key_name = "id",
				locator1 = "FrontendDataSetAdmin#FIELDS_ITEM");
		}

		task ("And is not present metadata fields:x-class-name, x-schema-name and scopeKey") {
			AssertElementNotPresent(
				key_name = "x-class-name",
				locator1 = "FrontendDataSetAdmin#FIELDS_ITEM");

			AssertElementNotPresent(
				key_name = "x-schema-name",
				locator1 = "FrontendDataSetAdmin#FIELDS_ITEM");

			AssertElementNotPresent(
				key_name = "scopeKey",
				locator1 = "FrontendDataSetAdmin#FIELDS_ITEM");
		}
	}

	@description = "LPS-185226. Confirm that the user can add a field"
	@priority = 5
	test CanAddField {
		task ("And clicks on Add Fields button") {
			LexiconEntry.gotoAdd();
		}

		task ("And checks id field") {
			FrontendDataSetAdmin.checkFields(checkboxName = "id");
		}

		task ("And clicks on Save button") {
			Button.clickSave();
		}

		task ("Then the added fields are shown on Fields tab page") {
			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "id");
		}
	}

	@description = "LPS-185498. Confirm that when trying to delete field, modal appears."
	@ignore = "true"
	@priority = 4
	test CanAssertModalWhenDeleteField {

		// TODO LPS-185498 CanAssertModalWhenDeleteField pending implementation

	}

	@description = "LPS-185230. Confirm that the user can cancel adding a field by clicking on cancel button."
	@priority = 4
	test CanCancelAddingOnCancelButton {
		task ("And clicks on Add Fields button") {
			LexiconEntry.gotoAdd();
		}

		task ("And checks id field") {
			FrontendDataSetAdmin.checkFields(checkboxName = "id");
		}

		task ("And clicks on Cancel button") {
			Button.clickCancel();
		}

		task ("Then there's no fields on Fields tab page") {
			AssertElementPresent(
				key_text = "Add Fields",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-185232. Confirm that the user can cancel adding a field by clicking on modal's close (X) button."
	@priority = 4
	test CanCancelAddingOnCloseButton {
		task ("And clicks on plus button") {
			LexiconEntry.gotoAdd();
		}

		task ("And checks creator field") {
			FrontendDataSetAdmin.checkFields(checkboxName = "creator");
		}

		task ("And clicks on X icon of the modal") {
			Click(
				key_modalTitle = "Add Fields",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("Then the modal is closed / And the changes are not saved") {
			AssertElementPresent(
				key_text = "Add Fields",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-185500. Confirm that can cancel field deletion on cancel button."
	@ignore = "true"
	@priority = 4
	test CanCancelFieldDeletion {

		// TODO LPS-185500 CanCancelFieldDeletion pending implementation

	}

	@description = "LPS-185229. Confirm that the user can change the field's order on Fields tab page."
	@priority = 4
	test CanChangeFieldOrder {
		task ("And clicks on plus button") {
			LexiconEntry.gotoAdd();
		}

		task ("And checks id and label fields") {
			FrontendDataSetAdmin.checkFields(checkboxName = "id");

			FrontendDataSetAdmin.checkFields(checkboxName = "label");
		}

		task ("And clicks on Save button") {
			Button.clickSave();
		}

		task ("And clicks on a field drag dots icon related id field ") {
			Click.clickAt(
				key_nameField = "id",
				locator1 = "FrontendDataSetAdmin#FIELDS_DRAG_DOTS_ICON");
		}

		task ("Then the user can move the id field below the label field") {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_nameField = "id",
				key_position = 2,
				keyName = "label",
				locator1 = "FrontendDataSetAdmin#FIELDS_DRAG_DOTS_ICON",
				locator2 = "FrontendDataSetAdmin#FIELDS_TABLE");

			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "label");

			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 2,
				keyName = "id");
		}
	}

	@description = "LPS-179282. Confirm that the user can check and uncheck all the fields"
	@priority = 4
	test CanCheckAndUncheckAllFields {
		task ("And Clicking to Add a new field") {
			LexiconEntry.gotoAdd();
		}

		task ("And select all the fields.") {
			FrontendDataSetAdmin.checkFields(checkboxName = "");
		}

		task ("Then Confirm all fields are checked ") {
			FrontendDataSetAdmin.assertFieldsChecked(key_fieldList = "name,creator,externalReferenceCode,id,status,createDate,label,modifiedDate,renderer,r_fdsViewFDSFieldRelationship_c_fdsViewId,r_fdsViewFDSFieldRelationship_c_fdsViewERC,sortable,type");
		}

		task ("When Uncheck all the fields.") {
			Uncheck.uncheckNotVisible(
				checkboxName = "",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Then Confirm that all fields are unchecked ") {
			FrontendDataSetAdmin.assertFieldsNotChecked(key_fieldList = "name,creator,externalReferenceCode,id,status,createDate,label,modifiedDate,renderer,r_fdsViewFDSFieldRelationship_c_fdsViewId,r_fdsViewFDSFieldRelationship_c_fdsViewERC,sortable,type");
		}
	}

	@description = "LPS-185499. Confirm that field can be deleted."
	@ignore = "true"
	@priority = 4
	test CanDeleteField {

		// TODO LPS-185499 CanDeleteField pending implementation

	}

	@description = "LPS-185228. Confirm that a field is not added after checking and unchecking it."
	@priority = 5
	test CannotAddFieldAfterUncheckingIt {
		task ("And clicks on plus button") {
			LexiconEntry.gotoAdd();
		}

		task ("And checks id and label fields") {
			FrontendDataSetAdmin.checkFields(checkboxName = "id");

			FrontendDataSetAdmin.checkFields(checkboxName = "label");
		}

		task ("And unchecks id field") {
			AppBuilderAdmin.uncheckCheckbox(checkboxOption = "id");
		}

		task ("And clicks on Save button") {
			Button.clickSave();
		}

		task ("Then label field should appear on Fields tab page") {
			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "label");
		}

		task ("And id should not appear on Fields tab page") {
			AssertElementNotPresent(
				key_position = 1,
				keyName = "id",
				locator1 = "FrontendDataSetAdmin#FIELDS_TABLE");
		}
	}

	@description = "LPS-185501. Confirm that fields are not updated if proccess is canceled on cancel button."
	@ignore = "true"
	@priority = 4
	test CannotUpdateFieldsIfCancelOnCancelButton {

		// TODO LPS-185501 CannotUpdateFieldsIfCancelOnCancelButton pending implementation

	}

	@description = "LPS-185502. Confirm that fields are not updated if proccess is canceled on close (X) button."
	@ignore = "true"
	@priority = 4
	test CannotUpdateFieldsIfCancelOnCloseButton {

		// TODO LPS-185502 CannotUpdateFieldsIfCancelOnCloseButton pending implementation

	}

	@description = "LPS-179282. Confirm that the search bar returns works as expected"
	@priority = 4
	test CanSearchField {
		task ("And Clicking to Add a new field") {
			LexiconEntry.gotoAdd();
		}

		task ("And type Account in the search bar and click enter") {
			FrontendDataSetAdmin.searchFieldInModal(searchTerm = "name");
		}

		task ("Then the corresponding option is the just displayed") {
			AssertElementPresent(
				key_name = "name",
				locator1 = "FrontendDataSetAdmin#FIELDS_ITEM");
		}
	}

	@description = "LPS-185227. Confirm that the user can search a specific field when adding fields."
	@priority = 4
	test CanSearchFieldOnAddFieldsModal {
		task ("And clicks on Add Fields button") {
			LexiconEntry.gotoAdd();
		}

		task ("And types 'label' on modal search bar") {
			FrontendDataSetAdmin.searchFieldInModal(searchTerm = "label");
		}

		task ("Then 'label' field should appear on Add Fields modal") {
			AssertElementPresent(
				key_name = "label",
				locator1 = "FrontendDataSetAdmin#FIELDS_ITEM");
		}
	}

	@description = "LPS-185231. Confirm that the user can search a specific field on field's search bar."
	@priority = 4
	test CanSearchFieldOnFieldsSearchBar {
		task ("And clicks on plus button") {
			LexiconEntry.gotoAdd();
		}

		task ("And checks id and label fields") {
			FrontendDataSetAdmin.checkFields(checkboxName = "id");

			FrontendDataSetAdmin.checkFields(checkboxName = "label");
		}

		task ("And clicks on Save button") {
			Button.clickSave();
		}

		task ("And types id on Fields search bar") {
			FrontendDataSetAdmin.searchField(searchTerm = "id");
		}

		task ("And clicks on search icon") {
			Click(locator1 = "AppBuilder#SEARCH_BUTTON");
		}

		task ("Then only id field should appear on Fields page") {
			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "id");
		}
	}

	@description = "LPS-185503. Confirm that fields are not updated when saving changes."
	@ignore = "true"
	@priority = 4
	test CanUpdateFieldsWhenSave {

		// TODO LPS-185503 CanUpdateFieldsWhenSave pending implementation

	}

	@description = "LPS-179282. Confirm that the user can check and uncheck the fields"
	@priority = 5
	test CheckandUncheckFields {
		task ("And Clicking to Add a new field") {
			LexiconEntry.gotoAdd();
		}

		task ("And Check three options (creator,id ,name)") {
			FrontendDataSetAdmin.checkFields(checkboxName = "creator");

			FrontendDataSetAdmin.checkFields(checkboxName = "id");

			FrontendDataSetAdmin.checkFields(checkboxName = "name");
		}

		task ("Then Confirm that the fields are checked ") {
			FrontendDataSetAdmin.assertFieldsChecked(key_fieldList = "creator,id,name");
		}

		task ("When Check three options (Phone, User Account, and WebURL)") {
			Uncheck.uncheckNotVisible(
				checkboxName = "creator",
				locator1 = "Checkbox#ANY_CHECKBOX");

			Uncheck.uncheckNotVisible(
				checkboxName = "id",
				locator1 = "Checkbox#ANY_CHECKBOX");

			Uncheck.uncheckNotVisible(
				checkboxName = "name",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Then Confirm that the fields are unchecked ") {
			FrontendDataSetAdmin.assertFieldsNotChecked(key_fieldList = "creator,id,name");
		}
	}

}