@component-name = "portal-frontend-infrastructure"
definition {

	property custom.properties = "feature.flag.LPS-164563=true";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Dataset";
	property testray.main.component.name = "Frontend Dataset";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given creating a Data Set via API") {
			FrontendDataSetAdmin.goToDatasetAdminPage();

			FrontendDataSetAdmin.createDatasetEntryViaAPI(
				datasetName = "Dataset Test",
				restApplication = "/c/fdsdatefilters",
				restEndpoint = "/",
				restSchema = "FDSDateFilter");
		}

		task ("And a dataset view created via api") {
			FrontendDataSetAdmin.createFDSViewViaAPI(
				datasetName = "Dataset Test",
				dataSetViewDescription = "Description Test",
				key_dataSetViewNameList = "View Test");
		}

		task ("When go to the View page of the dataset created.") {
			FrontendDataSetAdmin.goToSpecificViewPage(
				datasetName = "Dataset Test",
				key_viewName = "View Test");
		}

		task ("When the user accesses the Filters tab.") {
			FrontendDataSetAdmin.goToTab(tabName = "Filters");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		FrontendDataSetAdmin.deleteAllDatasetEntries();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-176184. Confirm that all fields in the schema are displayed"
	@priority = 5
	test AssertAllFieldsAreDisplayedInSchema {
		task ("And clicks to add a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("asserts all fields in the schema are displayed") {
			Click(locator1 = "FrontendDataSetAdmin#FILTER_BY_SELECT");

			FrontendDataSetAdmin.assertSearchFilters(key_filterList = "creator,externalReferenceCode,id,status,createDate,fieldName,from,modifiedDate,name,r_fdsViewFDSDateFilterRelationship_c_fdsViewId,rendererType,r_fdsViewFDSDateFilterRelationship_c_fdsViewERC,to,type");
		}
	}

	@description = "LPS-176184. Confirm that when 'Name Field' is not provided, it is filled with the same name as field name."
	@priority = 3
	test AssertNameIsFilledByDefault {
		task ("And adds a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("And Choose an ID in the Filter By field") {
			FrontendDataSetAdmin.selectFilters(filterType = "id");
		}

		task ("And Clicks Save") {
			Button.clickSave();
		}

		task ("Then Confirm that the name of the saved filter is the same name as the chosen field") {
			AssertElementPresent(
				chosenFilter = "id",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "FrontendDataSetAdmin#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-176188. Confirm that the Delete option is present."
	@priority = 3
	test CanAssertDeleteIsPresent {
		task ("And adds a filter") {
			FrontendDataSetAdmin.createFilters(
				filterName = "Test Filter",
				key_filterList = "id");
		}

		task ("When the user clicks the ellipsis //3 dots menu") {
			Click(
				key_fieldName = "id",
				locator1 = "FrontendDataSetAdmin#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
		}

		task ("Then assert the Delete option is present") {
			AssertElementPresent(
				key_text = "Delete",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-176187. Confirm that the fields Name and Filter by are present in the New Filter modal."
	@ignore = "true"
	@priority = 5
	test CanAssertFieldsIsPresent {

		// TODO LPS-176187 CanAssertFieldsIsPresent pending implementation

	}

	@description = "LPS-176188. Confirm that the field is deleted and a successful message is displayed."
	@priority = 3
	test CanAssertFilterIsDeleted {
		task ("And adds a filter") {
			FrontendDataSetAdmin.createFilters(
				filterName = "Test Filter",
				key_filterList = "creator");
		}

		task ("When the user selects the Delete option in the 3 dots menu") {
			Click(
				key_fieldName = "creator",
				locator1 = "FrontendDataSetAdmin#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
		}

		task ("Then the modal with a confirmation message is displayed") {
			AssertElementPresent(
				key_modalText = "Are you sure you want to delete this filter? It will be removed immediately. Fragments using it will be affected. This action cannot be undone.",
				locator1 = "FrontendDataSetAdmin#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And confirms the deletion") {
			Button.clickDelete();
		}

		task ("Then assert the field is deleted") {
			AssertElementNotPresent(
				key_nameField = "creator",
				key_position = 1,
				locator1 = "FrontendDataSetAdmin#FIELDS_TABLE");
		}

		task ("And a successful message is displayed") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#SUCCESS",
				value1 = "Your request completed successfully.");
		}
	}

	@description = "LPS-176184. Confirm that 'No default filters were created.' and 'Start creating a filter to display specific data' messages are displayed"
	@priority = 3
	test CanAssertNoDefaultFilters {
		task ("Then asserts the message: 'No default filters were created. Start creating a filter to display specific data' is displayed") {
			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");

			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_TEXT",
				value1 = "Start creating a Filter to display specific Data.");
		}
	}

	@description = "LPS-176187. Confirm that the Selection option is not displayed."
	@ignore = "true"
	@priority = 5
	test CanAssertSelectionIsNotDisplayed {

		// TODO LPS-176187 CanAssertSelectionIsNotDisplayed pending implementation

	}

	@description = "LPS-176187. Confirm that the Selection option has a tooltip with the text message."
	@ignore = "true"
	@priority = 3
	test CanAssertSelectionTooltip {

		// TODO LPS-176187 CanAssertSelectionTooltip pending implementation

	}

	@description = "LPS-176187. Confirm that the Source Option is displayed in the New Filter Modal."
	@ignore = "true"
	@priority = 3
	test CanAssertSourceOption {

		// TODO LPS-176187 CanAssertSourceOption pending implementation

	}

	@description = "LPS-176187. Confirm the text message in the Source Option Tooltip."
	@ignore = "true"
	@priority = 3
	test CanAssertSourceOptionTooltip {

		// TODO LPS-176187 CanAssertSourceOptionTooltip pending implementation

	}

	@description = "LPS-176187. Confirm that the Filter has been created and has the Name and Field Name fields."
	@ignore = "true"
	@priority = 5
	test CanAssertTheFieldsIsDisplayed {

		// TODO LPS-176187 CanAssertTheFieldsIsDisplayed pending implementation

	}

	@description = "LPS-176188. Confirm that an element dragged and dropped below another,will be deprioritized."
	@priority = 5
	test CanBeDeprioritizedBelowAnother {
		task ("And adds two or more new filters") {
			FrontendDataSetAdmin.createFilters(
				filterName = "Filter Test",
				key_filterList = "id");

			FrontendDataSetAdmin.createFilters(
				filterName = "Second Test",
				key_filterList = "creator");
		}

		task ("When an element is dragged and dropped below another element of the list") {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_nameField = "id",
				key_position = 2,
				keyName = "creator",
				locator1 = "FrontendDataSetAdmin#SELECT_DATASET",
				locator2 = "FrontendDataSetAdmin#FIELDS_TABLE");
		}

		task ("Then this element will be deprioritized") {
			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 2,
				keyName = "id");
		}
	}

	@description = "LPS-176188. Confirm that an element dragged and dropped on top of another element will be prioritized."
	@priority = 4
	test CanBePrioritizedOverAnother {
		task ("And adds two or more new filters") {
			FrontendDataSetAdmin.createFilters(
				filterName = "Filter Test",
				key_filterList = "id");

			FrontendDataSetAdmin.createFilters(
				filterName = "Second Test",
				key_filterList = "creator");
		}

		task ("When an element is dragged and dropped over another element of the list") {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_nameField = "creator",
				key_position = 1,
				keyName = "id",
				locator1 = "FrontendDataSetAdmin#FIELDS_TABLE",
				locator2 = "FrontendDataSetAdmin#SELECT_DATASET");
		}

		task ("Then this element will be prioritized") {
			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "creator");
		}
	}

	@description = "LPS-176188. Confirm that the field is not deleted by clicking the Cancel button."
	@priority = 5
	test CanCancelButtonDeleteFilter {
		task ("And adds a filter") {
			FrontendDataSetAdmin.createFilters(
				filterName = "Filter Test",
				key_filterList = "from");
		}

		task ("When the user selects the Delete option in the 3 dots menu") {
			Click(
				key_fieldName = "from",
				locator1 = "FrontendDataSetAdmin#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
		}

		task ("Then the modal with a confirmation message is displayed") {
			AssertElementPresent(
				key_modalText = "Are you sure you want to delete this filter? It will be removed immediately. Fragments using it will be affected. This action cannot be undone.",
				locator1 = "FrontendDataSetAdmin#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And cancels the deletion") {
			Button.clickCancel();
		}

		task ("Then assert the field is not deleted and it still appears in the Fields tab table") {
			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "from");
		}
	}

	@description = "LPS-176184. Confirm that the New filter modal is closed and the changes are not applied when canceling on Cancel button"
	@priority = 3
	test CanCancelFilterCreationOnCancelButton {
		task ("And clicks to add a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("Then click on the "Cancel button"") {
			Button.clickCancel();
		}

		task ("And assert the New filter modal is closed and the changes are not applied") {
			AssertElementNotPresent(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");

			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");
		}
	}

	@description = "LPS-176184. Confirm that the New filter modal is closed and the changes are not applied when canceling on Close X button"
	@priority = 3
	test CanCancelFilterCreationOnCloseButton {
		task ("And clicks to add a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("Then click on the "Close button"") {
			Click(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("And assert the New filter modal is closed and the changes are not applied") {
			AssertElementNotPresent(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");

			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");
		}
	}

	@description = "LPS-176187. Confirm the cancellation of the Filter creation with the cancel button."
	@ignore = "true"
	@priority = 4
	test CanCancelOnCancelButton {

		// TODO LPS-176187 CanCancelOnCancelButton pending implementation

	}

	@description = "LPS-176187. Confirm the cancellation of the Filter creation with the close button."
	@ignore = "true"
	@priority = 4
	test CanCancelOnCloseButton {

		// TODO LPS-176187 CanCancelOnCloseButton pending implementation

	}

	@description = "LPS-176184. Confirm that the text Select is labeling the  Filter By Field"
	@priority = 5
	test CanCreateFilters {
		task ("And adds a new filter") {
			FrontendDataSetAdmin.createFilters(
				filterName = "Test Filter",
				key_filterList = "id");
		}

		task ("Then asserts the selected option is actually displayed") {
			AssertElementPresent(
				chosenFilter = "id",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "FrontendDataSetAdmin#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-176188. Confirm that the elements of the list can be dragged and dropped."
	@priority = 4
	test CanInteractDragDrop {
		task ("And adds two or more filters") {
			FrontendDataSetAdmin.createFilters(
				filterName = "Filter Test",
				key_filterList = "id");

			FrontendDataSetAdmin.createFilters(
				filterName = "Second Test",
				key_filterList = "creator");
		}

		task ("Then assert the elements in the list can be dragged and dropped") {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_nameField = "id",
				key_position = 2,
				keyName = "creator",
				locator1 = "FrontendDataSetAdmin#SELECT_DATASET",
				locator2 = "FrontendDataSetAdmin#FIELDS_TABLE");

			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "creator");

			FrontendDataSetAdmin.assertFieldsOnTable(
				key_position = 2,
				keyName = "id");
		}
	}

	@description = "LPS-176184. Confirm that 'Filter By' field cannot be empty"
	@priority = 3
	test CannotLeaveFilterByEmpty {
		task ("And adds a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("And Fill the name filter with Test filter") {
			Type(
				locator1 = "TextInput#NAME",
				value1 = "Test Filter");
		}

		task ("Then Comfirm that is not possible clicks save button") {
			AssertElementPresent(
				key_text = "Save",
				locator1 = "Button#ANY_DISABLED");
		}
	}

	@description = "LPS-176187. Confirm that only one radio button can be selected."
	@ignore = "true"
	@priority = 5
	test CanOnlyOneRadioButtonIsSelected {

		// TODO LPS-176187 CanOnlyOneRadioButtonIsSelected pending implementation

	}

	@description = "LPS-176184. Confirm that is possible search filter when click on search icon"
	@priority = 3
	test CanSearchFilterOnIcon {
		task ("And adds two or more new filters") {
			FrontendDataSetAdmin.createFilters(key_filterList = "creator,id");
		}

		task ("Then the user searches for one of the created filters") {
			FrontendDataSetAdmin.searchField(searchTerm = "creator");
		}

		task ("And clicks the search icon") {
			Click(locator1 = "AppBuilder#SEARCH_BUTTON");
		}

		task ("Then the corresponding result is displayed.") {
			AssertElementPresent(
				chosenFilter = "creator",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "FrontendDataSetAdmin#FILTER_TABLE_CELL");
		}
	}

}