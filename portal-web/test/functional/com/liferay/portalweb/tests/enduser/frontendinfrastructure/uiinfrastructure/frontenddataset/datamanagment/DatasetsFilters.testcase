@component-name = "portal-frontend-infrastructure"
definition {

	property custom.properties = "feature.flag.LPS-164563=true";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Dataset";
	property testray.main.component.name = "Frontend Dataset";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given creating a Data Set via API") {
			FrontendDataSetAdmin.goToDatasetAdminPage();

			FrontendDataSetAdmin.createDatasetEntryViaAPI(
				datasetName = "Dataset Test",
				restApplication = "/c/fdsdatefilters",
				restEndpoint = "/",
				restSchema = "FDSDateFilter");
		}

		task ("And a dataset view created via api") {
			FrontendDataSetAdmin.createFDSViewViaAPI(
				datasetName = "Dataset Test",
				dataSetViewDescription = "Description Test",
				key_dataSetViewNameList = "View Test");
		}

		task ("When go to the View page of the dataset created.") {
			FrontendDataSetAdmin.goToSpecificViewPage(
				datasetName = "Dataset Test",
				key_viewName = "View Test");
		}

		task ("When the user accesses the Filters tab.") {
			FrontendDataSetAdmin.goToTab(tabName = "Filters");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		FrontendDataSetAdmin.deleteAllDatasetEntries();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-176184. Confirm that all fields in the schema are displayed"
	@priority = 5
	test AssertAllFieldsAreDisplayedInSchema {
		task ("And clicks to add a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("asserts all fields in the schema are displayed") {
			Click(locator1 = "FrontendDataSetAdmin#FILTER_BY_SELECT");

			FrontendDataSetAdmin.assertSearchFilters(key_filterList = "creator,externalReferenceCode,id,status,createDate,fieldName,from,modifiedDate,name,r_fdsViewFDSDateFilterRelationship_c_fdsViewId,rendererType,r_fdsViewFDSDateFilterRelationship_c_fdsViewERC,to,type");
		}
	}

	@description = "LPS-176184. Confirm that when 'Name Field' is not provided, it is filled with the same name as field name."
	@priority = 3
	test AssertNameIsFilledByDefault {
		task ("And adds a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("And Choose an ID in the Filter By field") {
			FrontendDataSetAdmin.selectFilters(filterType = "id");
		}

		task ("And Clicks Save") {
			Button.clickSave();
		}

		task ("Then Confirm that the name of the saved filter is the same name as the chosen field") {
			AssertElementPresent(
				chosenFilter = "id",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "FrontendDataSetAdmin#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-176184. Confirm that 'No default filters were created.' and 'Start creating a filter to display specific data' messages are displayed"
	@priority = 3
	test CanAssertNoDefaultFilters {
		task ("Then asserts the message: 'No default filters were created. Start creating a filter to display specific data' is displayed") {
			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");

			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_TEXT",
				value1 = "Start creating a Filter to display specific Data.");
		}
	}

	@description = "LPS-176184. Confirm that the New filter modal is closed and the changes are not applied when canceling on Cancel button"
	@priority = 3
	test CanCancelFilterCreationOnCancelButton {
		task ("And clicks to add a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("Then click on the "Cancel button"") {
			Button.clickCancel();
		}

		task ("And assert the New filter modal is closed and the changes are not applied") {
			AssertElementNotPresent(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");

			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");
		}
	}

	@description = "LPS-176184. Confirm that the New filter modal is closed and the changes are not applied when canceling on Close (X) button"
	@priority = 3
	test CanCancelFilterCreationOnCloseButton {
		task ("And clicks to add a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("Then click on the "Close button"") {
			Click(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("And assert the New filter modal is closed and the changes are not applied") {
			AssertElementNotPresent(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");

			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");
		}
	}

	}

	@description = "LPS-176184. Confirm that 'Filter By' field cannot be empty"
	@priority = 3
	test CannotLeaveFilterByEmpty {
		task ("And adds a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("And Fill the name filter with Test filter") {
			Type(
				locator1 = "TextInput#NAME",
				value1 = "Test Filter");
		}

		task ("Then Comfirm that is not possible clicks save button") {
			AssertElementPresent(
				key_text = "Save",
				locator1 = "Button#ANY_DISABLED");
		}
	}

	@description = "LPS-183476. Confirm that when searching one of the created filters and pressing Enter Key the corresponding result is displayed"
	@ignore = "true"
	@priority = 4
	test CanSearchFilterOnEnterKey {

		// TODO LPS-183476 CanSearchFilterOnEnterKey pending implementation

	}

	@description = "LPS-183476. Confirm that "
	@ignore = "true"
	@priority = 3
	test CanSearchFilterOnIcon {

		// TODO LPS-183476 CanSearchFilterOnIcon pending implementation

	}

}