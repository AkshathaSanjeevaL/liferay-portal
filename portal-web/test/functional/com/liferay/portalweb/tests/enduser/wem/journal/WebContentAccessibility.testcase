@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.component.names = "Echo Accessibility";
	property testray.main.component.name = "Web Content Administration";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}
	}

	@description = "This is a test for LPS-171044. The site designer could select or deselect a parent node and all its child items via keyboard shortcuts."
	@priority = 3
	test SelectOrDeselectParentNodeAndChildItemsViaKeyboard {
		task ("Given a site designer has a web content") {
			JSONCategory.addVocabulary(
				groupName = ${randomSiteName},
				title = "Vocabulary Name");

			JSONCategory.addCategory(
				groupName = ${randomSiteName},
				title = "Category Name",
				vocabularyName = "Vocabulary Name");

			for (var i : list "1,2,3") {
				JSONCategory.addSubcategory(
					groupName = ${randomSiteName},
					parentCategoryName = "Category Name",
					title = "Subcategory Name ${i}",
					vocabularyName = "Vocabulary Name");
			}

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");
		}

		task ("When the site designer opens the Select Category modal") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			Panel.expandPanel(panel = "Categorization");

			Click(
				key_fieldLabel = "Vocabulary Name",
				key_text = "Select",
				locator1 = "Button#ANY_WITH_LABEL");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Portlet.expandTree();
		}

		task ("Then the site designer could select or deselect parent node and child items via keyboard and mouse") {
			KeyPress(
				key_text = "plus",
				locator1 = "Icon#ANY",
				value1 = "\TAB");

			Type.sendKeys(
				locator1 = "//div[@role='treeitem'][normalize-space()='Category Name']",
				value1 = "keys=SHIFT,ENTER");

			for (var categoryName : list "Category Name,Subcategory Name 1,Subcategory Name 2,Subcategory Name 3") {
				AssertChecked.assertCheckedNotVisible(
					key_nodeName = ${categoryName},
					locator1 = "Treeview#NODE_CHECKBOX");
			}

			Type.sendKeys(
				locator1 = "//div[@role='treeitem'][normalize-space()='Category Name']",
				value1 = "keys=SHIFT,ENTER");

			for (var categoryName : list "Category Name,Subcategory Name 1,Subcategory Name 2,Subcategory Name 3") {
				AssertNotChecked.assertNotCheckedNotVisible(
					key_nodeName = ${categoryName},
					locator1 = "Treeview#NODE_CHECKBOX");
			}
		}
	}

	@description = "This is a test for LPS-182417. No accessibility issue in web content with date-time field structure"
	@priority = 4
	test ViewNoAccessibilityIssuesInDateTimeField {
		var structureName = StringUtil.randomString(8);

		var structureName = StringUtil.toLowerCase(${structureName});
		var webContentName = StringUtil.randomString(8);

		var webContentName = StringUtil.toLowerCase(${webContentName});

		task ("Given a web content with a date and time field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteName});

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "${structureName} Description",
				structureName = ${structureName});

			DataEngine.addField(
				fieldFieldLabel = "Date and Time",
				fieldName = "Date and Time");

			AssertElementAccessible(locator1 = "//div[contains(@class,'ddm-field-container')][contains(@data-field-name,'DateTime')]");

			WebContentStructures.saveCP(structureName = ${structureName});

			NavItem.gotoWebContent();

			WebContentNavigator.gotoAddWithStructureCP(structureName = ${structureName});

			PortletEntry.inputTitle(title = ${webContentName});

			DERenderer.inputDataInDateField(
				fieldLabel = "Date and Time",
				index = 1,
				value = "08/06/2021 10:00 AM");

			AssertElementAccessible(locator1 = "//div[contains(@class,'ddm-field-container')][contains(@data-field-name,'DateTime')]");

			PageEditor.publish();
		}

		task ("When we have a content page with a date fragment") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Date");
		}

		task ("Then should be no accessibility problem in Web content with date and time field structure") {
			PageEditorMapping.gotoEditableFieldMapping(
				className = "",
				fragmentName = "Date",
				id = "element-date");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = ${webContentName},
				navItem = "Web Content");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Date and Time");

			Select(
				key_fieldLabel = "Date Format",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Custom");

			Type(
				key_fieldLabel = "Custom Format",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "dd-MM-YYYY HH:mm a");

			PageEditor.waitForAutoSave();

			AssertElementAccessible(
				fragmentName = "",
				id = "element-date",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

		}
	}

}