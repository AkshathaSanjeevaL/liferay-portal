@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Create DXP Site with Commerce") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium Demo");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONGroup.deleteGroupByName(groupName = "Minium Demo");

			CommerceJSONChannelsAPI._deleteAllCommerceChannels();
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12575 | Test Summary: Assert number of sites counts match selected sites when the commerce toggle is disabled"
	@priority = "3"
	test SelectedSiteNumberCorrectWhenCommerceToggleDisabled {
		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(propertyName = "${assignedPropertyName}");
		}

		task ("Check that the number of sites matches the selected ones and the number of channels is equal to -") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "-",
				syncedSitesNumber = "3");
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12574 | Test Summary: Assert number of channels and sites counts match selected channels and sites"
	@priority = "5"
	test SelectedSitesAndChannelsNumbersCorrectAfterSync {
		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "Minium Demo Portal",
				propertyName = "${assignedPropertyName}");
		}

		task ("Assign sites to the property") {
			for (var siteName : list "Site Name, Minium Demo") {
				ACDXPSettings.syncSites(
					propertyName = "${assignedPropertyName}",
					siteName = "${siteName}");
			}
		}

		task ("Check that the number of channels and sites matches the selected ones") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "1",
				syncedSitesNumber = "2");
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12576 | Test Summary: Check that it is possible to enable toggle commerce for two different properties"
	@priority = "5"
	test CheckIsPossibleEnableToggleCommerceForTwoDifferentProperties {
		var newPropertyName = "AC Channel Property";

		task ("Create a new channel") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "AC Channel 1",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = "101");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "Minium Demo Portal",
				propertyName = "${assignedPropertyName}");
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(
				propertyName = "${assignedPropertyName}",
				siteName = "Minium Demo");
		}

		task ("Create new property and Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "AC Channel 1",
				newPropertyName = "${newPropertyName}");
		}

		task ("Assign sites to the new property") {
			ACDXPSettings.syncSites(
				propertyName = "${newPropertyName}",
				siteName = "Site Name");
		}

		task ("Check that the number of channels and sites matches the selected ones for the last property") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${newPropertyName}",
				syncedChannelsNumber = "1",
				syncedSitesNumber = "1");
		}

		task ("Check that the number of channels and sites matches the selected ones for the first property") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "1",
				syncedSitesNumber = "1");
		}
	}

}