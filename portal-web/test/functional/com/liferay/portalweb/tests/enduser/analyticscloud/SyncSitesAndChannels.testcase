@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Create DXP Site with Commerce") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium Demo");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.tearDownNonDefaultGroups();

			CommerceJSONChannelsAPI._deleteAllCommerceChannels();
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12578 | Test Summary: Check that the channel list cannot be edited if toggle is disabled"
	@priority = "5"
	test CheckChannelListCannotEditedIfToggleDisabled {
		var channelNameList = "Minium Demo Portal,AC Channel Disabled";

		task ("Create a new channel") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "AC Channel Disabled",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "Minium Demo Portal",
				propertyName = "${assignedPropertyName}");
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(
				propertyName = "${assignedPropertyName}",
				siteName = "Minium Demo");
		}

		task ("Check that the number of channels and sites matches the selected ones") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "1",
				syncedSitesNumber = "1");
		}

		task ("Toggle Commerce Off > Try to assign channels to the property") {
			Uncheck.uncheckToggleSwitch(
				key_propertyName = "${assignedPropertyName}",
				locator1 = "ACDXPSettings#COMMERCE_PROPERTY_TOGGLE");

			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = "${assignedPropertyName}");

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Check that the channel list is disabled for editing") {
			for (var channelName : list "${channelNameList}") {
				AssertElementPresent(
					key_selectedName = "${channelName}",
					locator1 = "ACDXPSettings#CHECKBOX_NOT_AVAILABLE_TO_SELECT");
			}
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12576 | Test Summary: Check that it is possible to enable toggle commerce for two different properties"
	@priority = "5"
	test CheckIsPossibleEnableToggleCommerceForTwoDifferentProperties {
		var newPropertyName = "AC Channel Property";

		task ("Create a new channel") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "AC Channel 1",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "Minium Demo Portal",
				propertyName = "${assignedPropertyName}");
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(
				propertyName = "${assignedPropertyName}",
				siteName = "Minium Demo");
		}

		task ("Create new property and Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "AC Channel 1",
				newPropertyName = "${newPropertyName}");
		}

		task ("Assign sites to the new property") {
			ACDXPSettings.syncSites(
				propertyName = "${newPropertyName}",
				siteName = "Site Name");
		}

		task ("Check that the number of channels and sites matches the selected ones for the last property") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${newPropertyName}",
				syncedChannelsNumber = "1",
				syncedSitesNumber = "1");
		}

		task ("Check that the number of channels and sites matches the selected ones for the first property") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "1",
				syncedSitesNumber = "1");
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12577 | Test Summary: Check that a site and a channel can only be selected for a single property"
	@priority = "4"
	test CheckSiteAndChannelOnlyBeSelectedForSingleProperty {
		var newPropertyName = "AC Single Property";
		var channelName = "Minium Demo Portal";
		var siteName = "Minium Demo";

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "${channelName}",
				propertyName = "${assignedPropertyName}");
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(
				propertyName = "${assignedPropertyName}",
				siteName = "${siteName}");
		}

		task ("Check that the number of channels and sites matches the selected ones") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "1",
				syncedSitesNumber = "1");
		}

		task ("Create new property") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "${newPropertyName}");
		}

		task ("Toggle Commerce On > Assign channels to the new property and check that channels already used in another property are not available") {
			Check.checkToggleSwitch(
				key_propertyName = "${newPropertyName}",
				locator1 = "ACDXPSettings#COMMERCE_PROPERTY_TOGGLE");

			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = "${newPropertyName}");

			ACDXPSettings.switchTab(tabName = "Channel");

			ACDXPSettings.searchACItem(searchItem = "${channelName}");

			AssertElementPresent(
				key_selectedName = "${channelName}",
				locator1 = "ACDXPSettings#CHECKBOX_NOT_AVAILABLE_TO_SELECT");
		}

		task ("Assign sites to the new property and check that sites already used in another property are not available") {
			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = "${newPropertyName}");

			ACDXPSettings.switchTab(tabName = "Sites");

			ACDXPSettings.searchACItem(searchItem = "${siteName}");

			AssertElementPresent(
				key_selectedName = "${siteName}",
				locator1 = "ACDXPSettings#CHECKBOX_NOT_AVAILABLE_TO_SELECT");
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12575 | Test Summary: Assert number of sites counts match selected sites when the commerce toggle is disabled"
	@priority = "3"
	test SelectedSiteNumberCorrectWhenCommerceToggleDisabled {
		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(propertyName = "${assignedPropertyName}");
		}

		task ("Check that the number of sites matches the selected ones and the number of channels is equal to -") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "-",
				syncedSitesNumber = "3");
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12574 | Test Summary: Assert number of channels and sites counts match selected channels and sites"
	@priority = "5"
	test SelectedSitesAndChannelsNumbersCorrectAfterSync {
		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "Minium Demo Portal",
				propertyName = "${assignedPropertyName}");
		}

		task ("Assign sites to the property") {
			for (var siteName : list "Site Name, Minium Demo") {
				ACDXPSettings.syncSites(
					propertyName = "${assignedPropertyName}",
					siteName = "${siteName}");
			}
		}

		task ("Check that the number of channels and sites matches the selected ones") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = "${assignedPropertyName}",
				syncedChannelsNumber = "1",
				syncedSitesNumber = "2");
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12579 | Test Summary: Can search for channels and sites on assigned property modal"
	@priority = "4"
	test CanSearchForChannelsAndSitesOnAssignedPropertyModal {
		var foundChannelName = "Minium Demo Portal";
		var notFoundChannelName = "AC Search Channel";
		var foundSitesName = "Minium Demo";
		var notFoundSitesName = "Site Name";

		task ("Create a new channel") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "${notFoundChannelName}",
				channelType = "site",
				currencyCode = "USD");
		}
		
		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Click on the Assign button") {
			Check.checkToggleSwitch(
				key_propertyName = "${assignedPropertyName}",
				locator1 = "ACDXPSettings#COMMERCE_PROPERTY_TOGGLE");

			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = "${assignedPropertyName}");

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Search for a channel on channels list") {
			ACDXPSettings.searchACItem(searchItem = "${foundChannelName}");

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${foundChannelName}");
		}

		task ("Check that unsearched channel names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${notFoundChannelName}");
		}

		task ("Search by name of a channel that does not exist") {
			ACDXPSettings.searchACItem(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No channels were found.");
		}

		task ("Switch to Sites tab") {
			ACDXPSettings.switchTab(tabName = "Sites");
		}

		task ("Search for a site on sites list") {
			ACDXPSettings.searchACItem(searchItem = "${foundSitesName}");

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${foundSitesName}");
		}

		task ("Check that unsearched sites names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${notFoundSitesName}");
		}

		task ("Search by name of a site that does not exist") {
			ACDXPSettings.searchACItem(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No sites were found.");
		}

		task ("Cancel to exit the wizard") {
			ACDXPSettings.cancelWizardConfiguration();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Click on the Assign button") {
			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = "${assignedPropertyName}");

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Search for a channel on channels list") {
			ACDXPSettings.searchACItem(searchItem = "${foundChannelName}");

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${foundChannelName}");
		}

		task ("Check that unsearched channel names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${notFoundChannelName}");
		}

		task ("Search by name of a channel that does not exist") {
			ACDXPSettings.searchACItem(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No channels were found.");
		}

		task ("Switch to Sites tab") {
			ACDXPSettings.switchTab(tabName = "Sites");
		}

		task ("Search for a site on sites list") {
			ACDXPSettings.searchACItem(searchItem = "${foundSitesName}");

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${foundSitesName}");
		}

		task ("Check that unsearched sites names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${notFoundSitesName}");
		}

		task ("Search by name of a site that does not exist") {
			ACDXPSettings.searchACItem(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No sites were found.");
		}
	}

}