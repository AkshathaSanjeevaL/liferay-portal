@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Create DXP Site with Commerce") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium Demo");
		}

		task ("Connect Commerce and AC") {
			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Get the property name to enable commerce on the right one") {
			var channelName = "Minium Demo Portal";
			var siteName = "Minium Demo";

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Enable commerce and sync the commerce channel and the related site") {
			ACDXPSettings.syncChannel(
				channelName = "${channelName}",
				propertyName = "${assignedPropertyName}");

			ACDXPSettings.syncSites(
				propertyName = "${assignedPropertyName}",
				siteName = "${siteName}");
		}

		task ("Go to the next page to configure people data") {
			Click(
				key_text = "Next",
				locator1 = "Button#ANY");
		}

        task ("Click on sync all contacts and accounts") {
			ACDXPSettings.syncContactsAndAccountstData();
		}

        task ("Go to the next page to configure attributes") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.tearDownNonDefaultGroups();

			ACUtils.tearDownCommerce();
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12777 | Test Summary: Select Attributes for People"
	@priority = "5"
	test CanSelectAttributesForPeople {
		task ("Get the number of attributes currently synced") {
			var syncPeopleNumberStart = ACDXPSettings.getSyncNumberPreview(attributeCategory = "People");
		}

        task ("Enable two attributes for People") {
			ACDXPSettings.syncAttributes(
				attributeCategory = "People",
				attributeNameList = "comments,externalReferenceCode");
		}

        task ("Check that the number of synchronized attributes has increased by 2 attributes") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				increaseAttributeNumber = "2",
				currentAttributeNumber = "${syncPeopleNumberStart}");
		}

        task ("Save and Finish the wizard") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}

        task ("Go to the attributes page in the sidebar") {
			ACDXPSettings.navToSyncedAttributes();
		}

        task ("Check selected account group number") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				increaseAttributeNumber = "2",
				currentAttributeNumber = "${syncPeopleNumberStart}");
		}
	}

    @description = "Story: LRAC-10860 | Automation ID: LRAC-12780 | Test Summary: Deselect non-required Attributes for People"
	@priority = "5"
	test CanDeselectNoRequiredAttributesForPeople {
		task ("Get the number of attributes currently synced") {
			var syncPeopleNumberStart = ACDXPSettings.getSyncNumberPreview(attributeCategory = "People");
		}

        task ("Deselect two attributes for People") {
			ACDXPSettings.desyncAttributes(
				attributeCategory = "People",
				attributeNameList = "birthday,male");
		}

        task ("Check that the number of synchronized attributes has increased by 2 attributes") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				decreaseAttributeNumber = "2",
				currentAttributeNumber = "${syncPeopleNumberStart}");
		}

        task ("Save and Finish the wizard") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}

        task ("Go to the attributes page in the sidebar") {
			ACDXPSettings.navToSyncedAttributes();
		}

        task ("Check selected account group number") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				decreaseAttributeNumber = "2",
				currentAttributeNumber = "${syncPeopleNumberStart}");
		}
	}

    @description = "Story: LRAC-10860 | Automation ID: LRAC-12781 | Test Summary: Check that it is possible to search the Attribute for People list"
	@priority = "4"
	test CanSearchAttributeForPeopleList {
        var foundPeopleAttribute = "birthday";
		var notFoundPeopleAttribute = "createDate,firstName";

        task ("Click to select attribute for people") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

        task ("Search for people attributes") {
			ACUtils.searchBar(searchItem = "${foundPeopleAttribute}");

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${foundPeopleAttribute}");
		}

		task ("Check that unsearched people attributes do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${notFoundPeopleAttribute}");
		}

		task ("Search by name of a people attributes that does not exist") {
			ACUtils.searchBar(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No attributes were found.");
		}
	}

    @description = "Story: LRAC-10860 | Automation ID: LRAC-12782 | Test Summary: Check that it is possible to make pagination in the Attribute for People list"
	@priority = "3"
	test CanPaginationAttributeForPeopleList {
        var firstPageList = "agreedToTermsOfUse,birthday,classNameId,classPK,comments";
		var lastPageList = "userName,uuid";

        task ("Click to select attribute for people") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

        task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = "5");

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 47 entries.");
		}

		task ("Check that 5 attributes for people appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${firstPageList}");
		}

		task ("Check that the attributes for people on the last page does not appear on the first") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${lastPageList}");
		}

		task ("Click to navigate for the last page") {
			ACUtils.checkAnyPage(pageNumber = "10");

			ACUtils.viewResultsMessage(results = "Showing 46 to 47 of 47 entries.");
		}

        task ("Check that 2 attributes for people appear on the last page") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${lastPageList}");
		}

		task ("Check that the attributes for people on the first page does not appear on the last") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${firstPageList}");
		}
	}

}