@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Create DXP Site with Commerce") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium Demo");
		}

		task ("Connect Commerce and AC") {
			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Get the property name to enable commerce on the right one") {
			var channelName = "Minium Demo Portal";
			var siteName = "Minium Demo";

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Enable commerce and sync the commerce channel and the related site") {
			ACDXPSettings.syncChannel(
				channelName = "${channelName}",
				propertyName = "${assignedPropertyName}");

			ACDXPSettings.syncSites(
				propertyName = "${assignedPropertyName}",
				siteName = "${siteName}");
		}

		task ("Go to the next page to configure people data") {
			Click(
				key_text = "Next",
				locator1 = "Button#ANY");
		}

		task ("Click on sync all contacts and accounts") {
			ACDXPSettings.syncContactsAndAccountstData();
		}

		task ("Go to the next page to configure attributes") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.tearDownNonDefaultGroups();

			ACUtils.tearDownCommerce();
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12780 | Test Summary: Deselect non-required Attributes for People"
	@priority = "5"
	test CanDeselectNoRequiredAttributesForPeople {
		task ("Get the number of attributes currently synced") {
			var syncPeopleNumberStart = ACDXPSettings.getSyncNumberPreview(attributeCategory = "People");
		}

		task ("Deselect two attributes for People") {
			ACDXPSettings.desyncAttributes(
				attributeCategory = "People",
				attributeNameList = "birthday,male");
		}

		task ("Check that the number of synchronized attributes has increased by 2 attributes") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				currentAttributeNumber = "${syncPeopleNumberStart}",
				decreaseAttributeNumber = "2");
		}

		task ("Save and Finish the wizard") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}

		task ("Go to the attributes page in the sidebar") {
			ACDXPSettings.navToSyncedAttributes();
		}

		task ("Check selected account group number") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				currentAttributeNumber = "${syncPeopleNumberStart}",
				decreaseAttributeNumber = "2");
		}
	}

	@description = "Story: LRAC-10865 | Automation ID: LRAC-12843 | Test Summary: Check that it is possible to make pagination in the Attribute for Account list"
	@priority = "3"
	test CanPaginationAttributeForAccountList {
		var firstPageList = "accountEntryId,companyId,createDate,defaultCPaymentMethodKey,description";
		var secondPageList = "domains,emailAddress,externalReferenceCode,logoId,modifiedDate";

		task ("Click to select attribute for Account") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Account");
		}

		task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = "5");

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 18 entries.");
		}

		task ("Check that 5 attributes for Account appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${firstPageList}");
		}

		task ("Check that the attributes for Account on the second page does not appear on the first") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${secondPageList}");
		}

		task ("Click to navigate for the second page") {
			ACUtils.checkAnyPage(pageNumber = "2");

			ACUtils.viewResultsMessage(results = "Showing 6 to 10 of 18 entries.");
		}

		task ("Check that 2 attributes for Account appear on the second page") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${secondPageList}");
		}

		task ("Check that the attributes for Account on the first page does not appear on the second page") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${firstPageList}");
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12782 | Test Summary: Check that it is possible to make pagination in the Attribute for People list"
	@priority = "3"
	test CanPaginationAttributeForPeopleList {
		var firstPageList = "agreedToTermsOfUse,birthday,classNameId,classPK,comments";
		var lastPageList = "userName,uuid";

		task ("Click to select attribute for people") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

		task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = "5");

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 47 entries.");
		}

		task ("Check that 5 attributes for people appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${firstPageList}");
		}

		task ("Check that the attributes for people on the last page does not appear on the first") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${lastPageList}");
		}

		task ("Click to navigate for the last page") {
			ACUtils.checkAnyPage(pageNumber = "10");

			ACUtils.viewResultsMessage(results = "Showing 46 to 47 of 47 entries.");
		}

		task ("Check that 2 attributes for people appear on the last page") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${lastPageList}");
		}

		task ("Check that the attributes for people on the first page does not appear on the last") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${firstPageList}");
		}
	}

	@description = "Story: LRAC-10865 | Automation ID: LRAC-12842 | Test Summary: Check that it is possible to search the Attribute for Account list"
	@priority = "4"
	test CanSearchAttributeForAccountList {
		var searchedAccountAttribute = "companyId";
		var unsearchedAccountAttribute = "domains";

		task ("Click to select attribute for account") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Account");
		}

		task ("Search for account attributes") {
			ACUtils.searchBar(searchItem = "${searchedAccountAttribute}");

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${searchedAccountAttribute}");
		}

		task ("Check that unsearched account attributes do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${unsearchedAccountAttribute}");
		}

		task ("Search by name of a account attributes that does not exist") {
			ACUtils.searchBar(searchItem = "gold");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No attributes were found.");
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12781 | Test Summary: Check that it is possible to search the Attribute for People list"
	@priority = "4"
	test CanSearchAttributeForPeopleList {
		var foundPeopleAttribute = "birthday";
		var notFoundPeopleAttribute = "createDate,firstName";

		task ("Click to select attribute for people") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

		task ("Search for people attributes") {
			ACUtils.searchBar(searchItem = "${foundPeopleAttribute}");

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${foundPeopleAttribute}");
		}

		task ("Check that unsearched people attributes do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${notFoundPeopleAttribute}");
		}

		task ("Search by name of a people attributes that does not exist") {
			ACUtils.searchBar(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No attributes were found.");
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12777 | Test Summary: Select Attributes for People"
	@priority = "5"
	test CanSelectAttributesForPeople {
		task ("Get the number of attributes currently synced") {
			var syncPeopleNumberStart = ACDXPSettings.getSyncNumberPreview(attributeCategory = "People");
		}

		task ("Enable two attributes for People") {
			ACDXPSettings.syncAttributes(
				attributeCategory = "People",
				attributeNameList = "comments,externalReferenceCode");
		}

		task ("Check that the number of synchronized attributes has increased by 2 attributes") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				currentAttributeNumber = "${syncPeopleNumberStart}",
				increaseAttributeNumber = "2");
		}

		task ("Save and Finish the wizard") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}

		task ("Go to the attributes page in the sidebar") {
			ACDXPSettings.navToSyncedAttributes();
		}

		task ("Check selected account group number") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				currentAttributeNumber = "${syncPeopleNumberStart}",
				increaseAttributeNumber = "2");
		}
	}

	@description = "Story: LRAC-10865 | Automation ID: LRAC-12844 | Test Summary: Check that it is possible to sort the Attribute for Account list by attribute and data type"
	@priority = "3"
	test CanSortAttributeForAccountList {
		var attributesAscendingOrder = '''
			accountEntryId,companyId,createDate,defaultCPaymentMethodKey,description,domains,
			emailAddress,externalReferenceCode,logoId,modifiedDate,name,parentAccountEntryId,
			restrictMembership,status,taxExemptionCode,taxIdNumber,type_,uuid_
		''';
		var attributesDescendingOrder = '''
			uuid_,type_,taxIdNumber,taxExemptionCode,status,restrictMembership,parentAccountEntryId,name,
			modifiedDate,logoId,externalReferenceCode,emailAddress,domains,description,defaultCPaymentMethodKey,
			createDate,companyId,accountEntryId
		''';
		var attributesDataTypeAscending = '''
			restrictMembership,status,accountEntryId,companyId,logoId,parentAccountEntryId,defaultCPaymentMethodKey,
			description,domains,emailAddress,externalReferenceCode,name,taxExemptionCode,taxIdNumber,type_,
			uuid_,createDate,modifiedDate
		''';
		var attributesDataTypeDescending = '''
			createDate,modifiedDate,defaultCPaymentMethodKey,description,domains,emailAddress,externalReferenceCode,name,
			taxExemptionCode,taxIdNumber,type_,uuid_,accountEntryId,companyId,logoId,parentAccountEntryId,
			status,restrictMembership
		''';
		var attributesAscendingOrderList = ListUtil.newListFromString("${attributesAscendingOrder}");
		var attributesDescendingOrderList = ListUtil.newListFromString("${attributesDescendingOrder}");
		var attributesDataTypeAscendingList = ListUtil.newListFromString("${attributesDataTypeAscending}");
		var attributesDataTypeDescendingList = ListUtil.newListFromString("${attributesDataTypeDescending}");

		task ("Click to configure Account attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Account");
		}

		task ("See that the list is sorted by attributes in the ascending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "up");

			ACDXPSettings.viewGenericListItem(itemValueList = "${attributesAscendingOrderList}");
		}

		task ("See that the list is sorted by attributes in the descending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "down");

			ACDXPSettings.viewGenericListItem(itemValueList = "${attributesDescendingOrderList}");
		}

		task ("See that the list is sorted by the data type of the attributes in ascending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Data Type");

			ACDXPSettings.setSortDirection(sortDirection = "up");

			ACDXPSettings.viewGenericListItem(itemValueList = "${attributesDataTypeAscendingList}");
		}

		task ("See that the list is sorted by the data type of the attributes in descending order") {
			ACDXPSettings.setSortDirection(sortDirection = "down");

			ACDXPSettings.viewGenericListItem(itemValueList = "${attributesDataTypeDescendingList}");
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12783 | Test Summary: Check that it is possible to sort the Attribute for People list by attribute and data type"
	@priority = "3"
	test CanSortAttributeForPeopleList {
		var attributesAscendingOrder = '''
			agreedToTermsOfUse,birthday,classNameId,classPK,
			comments,companyId,contactId,contactId,createDate,createDate,defaultUser,emailAddress,
			emailAddress,emailAddressVerified,employeeNumber,employeeStatusId,externalReferenceCode,
			facebookId,facebookSn,firstName,googleUserId,greeting,hoursOfOperation,jabberSn,jobClass,
			jobTitle,languageId,lastName,ldapServerId,male,middleName,modifiedDate,modifiedDate,openId,
			parentContactId,portraitId,prefixListTypeId,screenName,skypeSn,smsSn,status,suffixListTypeId,
			timeZoneId,twitterSn,userId,userName,uuid
		''';
		var attributesDescendingOrder = '''
			uuid,userName,userId,twitterSn,timeZoneId,
			suffixListTypeId,status,smsSn,skypeSn,screenName,prefixListTypeId,portraitId,
			parentContactId,openId,modifiedDate,modifiedDate,middleName,male,ldapServerId,
			lastName,languageId,jobTitle,jobClass,jabberSn,hoursOfOperation,greeting,googleUserId,
			firstName,facebookSn,facebookId,externalReferenceCode,employeeStatusId,employeeNumber,
			emailAddressVerified,emailAddress,emailAddress,defaultUser,createDate,createDate,contactId,
			contactId,companyId,comments,classPK,classNameId,birthday,agreedToTermsOfUse
		''';
		var attributesDataTypeAscending = '''
			male,agreedToTermsOfUse,defaultUser,emailAddressVerified,
			birthday,createDate,modifiedDate,createDate,modifiedDate,status,classNameId,classPK,contactId,
			employeeStatusId,parentContactId,prefixListTypeId,suffixListTypeId,companyId,contactId,facebookId,
			ldapServerId,portraitId,timeZoneId,userId,emailAddress,employeeNumber,facebookSn,hoursOfOperation,
			jabberSn,jobClass,skypeSn,smsSn,twitterSn,userName,comments,emailAddress,externalReferenceCode,
			firstName,googleUserId,greeting,jobTitle,languageId,lastName,middleName,openId,screenName,uuid
		''';
		var attributesDataTypeDescending = '''
			emailAddress,employeeNumber,facebookSn,hoursOfOperation,
			jabberSn,jobClass,skypeSn,smsSn,twitterSn,userName,comments,emailAddress,externalReferenceCode,
			firstName,googleUserId,greeting,jobTitle,languageId,lastName,middleName,openId,screenName,uuid,
			classNameId,classPK,contactId,employeeStatusId,parentContactId,prefixListTypeId,suffixListTypeId,
			companyId,contactId,facebookId,ldapServerId,portraitId,timeZoneId,userId,status,birthday,createDate,
			modifiedDate,createDate,modifiedDate,male,agreedToTermsOfUse,defaultUser,emailAddressVerified
		''';
		var attributesAscendingOrderList = ListUtil.newListFromString("${attributesAscendingOrder}");
		var attributesDescendingOrderList = ListUtil.newListFromString("${attributesDescendingOrder}");
		var attributesDataTypeAscendingList = ListUtil.newListFromString("${attributesDataTypeAscending}");
		var attributesDataTypeDescendingList = ListUtil.newListFromString("${attributesDataTypeDescending}");

		task ("Click to configure people attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");

			ACUtils.changePagination(itemsPerPage = "50");
		}

		task ("See that the list is sorted by attributes in the ascending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "up");

			ACDXPSettings.viewGenericListItem(itemValueList = "${attributesAscendingOrderList}");
		}

		task ("See that the list is sorted by attributes in the descending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "down");

			ACDXPSettings.viewGenericListItem(itemValueList = "${attributesDescendingOrderList}");
		}

		task ("See that the list is sorted by the data type of the attributes in ascending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Data Type");

			ACDXPSettings.setSortDirection(sortDirection = "up");

			ACDXPSettings.viewGenericListItem(itemValueList = "${attributesDataTypeAscendingList}");
		}

		task ("See that the list is sorted by the data type of the attributes in descending order") {
			ACDXPSettings.setSortDirection(sortDirection = "down");

			ACDXPSettings.viewGenericListItem(itemValueList = "${attributesDataTypeDescendingList}");
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12779 | Test Summary: Check that all defaults attributes are being checked for Attribute for People"
	@priority = "4"
	test CheckAllDefaultsAttributesAreCheckedForPeopleAttribute {
		var defaultAttributes = '''
			agreedToTermsOfUse,birthday,companyId,defaultUser,
			emailAddressVerified,employeeNumber,employeeStatusId,facebookSn,firstName,
			hoursOfOperation,jabberSn,jobClass,jobTitle,languageId,lastName,male,middleName,
			parentContactId,skypeSn,smsSn,status,timeZoneId,twitterSn,userName
		''';

		var defaultAttributesList = ListUtil.newListFromString("${defaultAttributes}");

		task ("Click to configure people attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

		task ("See that the all the default attributes are checked") {
			ACUtils.changePagination(itemsPerPage = "50");

			for (var attribute : list "${defaultAttributesList}") {
				AssertElementPresent(
					key_attributeName = "${attribute}",
					locator1 = "ACDXPSettings#CHECK_SELECT_ATTRIBUTES_ENABLE");
			}
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12778 | Test Summary: Cannot deselect required Attributes for People"
	@priority = "5"
	test CheckNotPossibleToDeselectRequiredAttributesForPeople {
		var requiredAttributes = '''
			classNameId,classPK,contactId,contactId,createDate,createDate,
			emailAddress,emailAddress,modifiedDate,modifiedDate,userId,uuid
		''';

		var requiredAttributesList = ListUtil.newListFromString("${requiredAttributes}");

		task ("Click to configure people attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

		task ("See that the required attributes can not be deselected (the input is disabled)") {
			ACUtils.changePagination(itemsPerPage = "50");

			for (var attribute : list "${requiredAttributesList}") {
				AssertElementPresent(
					key_requiredAttribute = "${attribute}",
					locator1 = "ACDXPSettings#ATTRIBUTES_CHECKBOX_DISABLED");
			}
		}
	}

	@description = "Story: LRAC-10866 | Automation ID: LRAC-12901 | Test Summary: Check that all attributes for Products are marked as required"
	@priority = "5"
	test AllProductAttributesRequired {
		task ("Click to configure products attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Products");
		}

		task ("See that the all the attributes are checked") {
			ACUtils.changePagination(itemsPerPage = "50");

			AssertElementNotPresent(locator1 = "ACDXPSettings#REQUIRED_ATTRIBUTES");
		}
	}

	@description = "Story: LRAC-10866 | Automation ID: LRAC-12903 | Test Summary: Check that it is possible to search the Attribute for Product list"
	@priority = "4"
	test CanSearchAttributeInProductList {
		var foundProductsAttribute = "currencyCode";
		var notFoundProductsAttribute = "name,description";

		task ("Click to select attribute for products") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Products");
		}

		task ("Search for products attributes") {
			ACUtils.searchBar(searchItem = "${foundProductsAttribute}");

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${foundProductsAttribute}");
		}

		task ("Check that unsearched products attributes do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = "${notFoundProductsAttribute}");
		}

		task ("Search by name of a products attributes that does not exist") {
			ACUtils.searchBar(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No attributes were found.");
		}
	}
}