/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.journal.web.internal.model.listener;

import com.liferay.dynamic.data.mapping.model.DDMStructure;
import com.liferay.journal.model.JournalArticle;
import com.liferay.journal.web.internal.configuration.JournalWebConfiguration;
import com.liferay.portal.configuration.metatype.bnd.util.ConfigurableUtil;
import com.liferay.portal.kernel.exception.ModelListenerException;
import com.liferay.portal.kernel.feature.flag.FeatureFlagManagerUtil;
import com.liferay.portal.kernel.model.BaseModelListener;
import com.liferay.portal.kernel.model.ModelListener;
import com.liferay.portal.kernel.util.Portal;

import java.util.Map;
import java.util.Objects;

import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Modified;
import org.osgi.service.component.annotations.Reference;

/**
 * @author Lourdes Fern√°ndez Besada
 */
@Component(
	configurationPid = "com.liferay.journal.web.internal.configuration.JournalWebConfiguration",
	service = ModelListener.class
)
public class DDMStructureModelListener extends BaseModelListener<DDMStructure> {

	@Override
	public void onBeforeUpdate(
			DDMStructure originalDDMStructure, DDMStructure ddmStructure)
		throws ModelListenerException {

		if (!FeatureFlagManagerUtil.isEnabled("LPS-184255") ||
			(ddmStructure.getClassNameId() !=
				_getJournalArticleClassNameId()) ||
			Objects.equals(
				originalDDMStructure.getStructureKey(),
				ddmStructure.getStructureKey())) {

			return;
		}

		if (_journalWebConfiguration.autogenerateDDMStructureKey() ||
			Objects.equals(
				originalDDMStructure.getStructureKey(), "BASIC-WEB-CONTENT")) {

			throw new ModelListenerException();
		}
	}

	@Activate
	@Modified
	protected void activate(Map<String, Object> properties) {
		_journalWebConfiguration = ConfigurableUtil.createConfigurable(
			JournalWebConfiguration.class, properties);
	}

	private long _getJournalArticleClassNameId() {
		if (_journalArticleClassNameId != null) {
			return _journalArticleClassNameId;
		}

		_journalArticleClassNameId = _portal.getClassNameId(
			JournalArticle.class);

		return _journalArticleClassNameId;
	}

	private Long _journalArticleClassNameId;
	private volatile JournalWebConfiguration _journalWebConfiguration;

	@Reference
	private Portal _portal;

}