@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-165819=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given Author, Book, Student, Subject and Univeristy object definitions with field 'name' created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_plural_label = "students",
				name = "Student");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_plural_label = "authors",
				name = "Author");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_plural_label = "books",
				name = "Book");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_plural_label = "subjects",
				name = "Subject");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_plural_label = "universities",
				name = "University");
		}

		task ("And Given studentUsers, usersUniversities, universitySubjects, subjectsUsers, userBooks, booksAuthors") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "User",
				name = "studentUsers",
				parentObjectName = "Student",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "University",
				name = "usersUniversities",
				parentObjectName = "User",
				type = "manyToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				name = "universitySubjects",
				parentObjectName = "University",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "User",
				name = "subjectsUsers",
				parentObjectName = "Subject",
				type = "manyToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Book",
				name = "userBooks",
				parentObjectName = "User",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Author",
				name = "booksAuthors",
				parentObjectName = "Book",
				type = "manyToMany");
		}

		task ("And Given entries for each created Object and and entry for system object User created") {
			var studentEntryId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Jane");
			var response = UserAccountAPI.createUserAccount(
				alternateName = "user_account",
				emailAddress = "user@liferay.com",
				familyName = "created",
				givenName = "user");

			var userId = JSONPathUtil.getIdValue(response = ${response});
			var universityEntryId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");
			var subjectEntryId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Math");
			var bookEntryId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "books",
				name = "Functions");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "authors",
				name = "Alice");
		}

		task ("And Given entries related through created relationships") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "students",
				objectEntry1 = ${studentEntryId},
				objectEntry2 = ${userId},
				relationshipName = "studentUsers");

			UserAccountAPI.relateObjectEntries(
				customObjectId = ${universityEntryId},
				relationshipName = "usersUniversities",
				userAccountId = ${userId});

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Math",
				parent_plural_label = "universities",
				parentEntryName = "Liferay",
				relationshipName = "universitySubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "subjects",
				objectEntry1 = ${subjectEntryId},
				objectEntry2 = ${userId},
				relationshipName = "subjectsUsers");

			UserAccountAPI.relateObjectEntries(
				customObjectId = ${bookEntryId},
				relationshipName = "userBooks",
				userAccountId = ${userId});

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "authors",
				childEntryName = "Alice",
				parent_plural_label = "books",
				parentEntryName = "Functions",
				relationshipName = "booksAuthors");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		JSONUser.tearDownNonAdminUsersNoSelenium();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCPNoSelenium();
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanGetCustomToSystemCustomToCustomRelationshipsDataWithDepth5 {
		task ("When GetStudentsPage with nestedFields=studentUsers,usersUniversities,universitySubjects,subjectsUsers,userBooks,booksAuthors and nestedFieldsDepth=5") {
			var responseEntries = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "nestedFields%3DstudentUsers%2CusersUniversities%2CuniversitySubjects%2CsubjectsUsers%2CuserBooks%2CbooksAuthors%26nestedFieldsDepth%3D5%26");
		}

		task ("Then the data for studentUsers,usersUniversities,universitySubjects,subjectsUsers,userBooks are visible in payload") {
			var bookName = JSONUtil.getWithJSONPath(${responseEntries}, "$..items[0].studentUsers[0].usersUniversities[0].universitySubjects[0].subjectsUsers[0].userBooks[0].name");

			TestUtils.assertEquals(
				actual = ${bookName},
				expected = "Functions");
		}
	}

	@disable-webdriver = "true"
	@priority = 5
	test CanGetCustomToSystemObjectRelationshipDataAsNestedField {
		task ("When GetStudentsPage with nestedFields=studentUsers") {
			var responseEntries = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "nestedFields=studentUsers");
		}

		task ("Then the data of studentUsers is visible in payload") {
			var userName = JSONUtil.getWithJSONPath(${responseEntries}, "$..items[0].studentUsers[0].name");

			TestUtils.assertEquals(
				actual = ${userName},
				expected = "user created");
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanGetFirstRelationshipDataWithNestedFieldsDepthSetTo5 {
		task ("When GetStudentsPage with nestedFields=studentUsers and nestedFieldsDepth=5") {
			var responseEntries = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "nestedFields%3DstudentUsers%26nestedFieldsDepth%3D5%26");
		}

		task ("Then the data of studentUsers is visible in payload") {
			var userName = JSONUtil.getWithJSONPath(${responseEntries}, "$..items[0].studentUsers[0].name");

			TestUtils.assertEquals(
				actual = ${userName},
				expected = "user created");
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanGetFirstRelationshipDataWithNestedFieldsDepthSetToZero {
		task ("When GetStudentsPage with nestedFields=studentUsers and nestedFieldsDepth=0") {
			var responseEntries = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "nestedFields%3DstudentUsers%26nestedFieldsDepth%3D0%26");
		}

		task ("Then the data of studentUsers is visible in payload") {
			var userName = JSONUtil.getWithJSONPath(${responseEntries}, "$..items[0].studentUsers[0].name");

			TestUtils.assertEquals(
				actual = ${userName},
				expected = "user created");
		}
	}

	@disable-webdriver = "true"
	@priority = 5
	test CannnotGetCustomToSystemCustomToCustomRelationshipsDataOfDepthHigherThan5 {
		task ("When GetStudentsPage with nestedFields=studentUsers,usersUniversities,universitySubjects,subjectsUsers,userBooks,booksAuthors and nestedFieldsDepth=6") {
			var responseEntries = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "nestedFields%3DstudentUsers%2CusersUniversities%2CuniversitySubjects%2CsubjectsUsers%2CuserBooks%2CbooksAuthors%26nestedFieldsDepth%3D6%26");
		}

		task ("Then the data of booksAuthors is not visible in payload") {
			var authorName = JSONUtil.getWithJSONPath(${responseEntries}, "$..items[0].studentUsers[0].usersUniversities[0].universitySubjects[0].subjectsUsers[0].userBooks[0].booksAuthors[0].name");

			TestUtils.assertEquals(
				actual = ${authorName},
				expected = "");
		}
	}

}