@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-153117=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given Student object with name field created and published") {
			var studentObjectDefinitionId = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("And Given Subject object with name field created and published") {
			var subjectObjectDefinitionId = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				requiredStringFieldName = "name");
		}

		task ("And Given a many-to-many studentsSubjects relationship created between Student and Subject") {
			var objectDefinitionId1 = ObjectDefinitionAPI.getObjectDefinitionIdByName(name = "User");

			ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "studentsSubjects",
				name = "studentsSubjects",
				objectDefinitionId1 = ${studentObjectDefinitionId},
				objectDefinitionId2 = ${subjectObjectDefinitionId},
				type = "manyToMany");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCPNoSelenium();
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanCreateCustomObjectEntriesWithPutChildObjectInManyToManyRelationship {
		property portal.acceptance = "true";

		task ("And Given Subject and Student entries are created with postSubject including studentsSubjects with Student entries information") {
			var response = CustomObjectAPI.createObjectEntryWithField(
				en_US_plural_label = "subjects",
				externalReferenceCode = "subjectErc",
				fieldName = "name",
				fieldValue = "Math",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				relatedEntryExternalReferenceCode = "studentErc",
				relatedEntryFieldName = "name");
		}

		task ("When with putSubject and subjectId including studentsSubjects with new Student entries information to update Subject entry") {
			var subjectId = JSONPathUtil.getIdValue(response = ${response});

			CustomObjectAPI.updateObjectEntry(
				en_US_plural_label = "subjects",
				externalReferenceCode = "subjectErc",
				fieldName = "name",
				fieldValue = "English",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				objectEntryId = ${subjectId},
				relatedEntryExternalReferenceCode = "newStudentErc",
				relatedEntryFieldName = "name");
		}

		task ("Then Subject entry is updated") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.items[*].name",
				en_US_plural_label = "subjects",
				expectedValues = "English");
		}

		task ("And Then new Student entries are created") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "subjects",
				expectedValues = 1);

			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "students",
				expectedValues = 4);
		}
	}

	@disable-webdriver = "true"
	@priority = 3
	test CanCreateCustomObjectEntriesWithPutParentObjectInManyToManyRelationship {
		property portal.acceptance = "true";

		task ("And Given Student and Subject entries are created with postStudent including studentsSubjects with Subject entries information") {
			var response = CustomObjectAPI.createObjectEntryWithField(
				en_US_plural_label = "students",
				externalReferenceCode = "studentErc",
				fieldName = "name",
				fieldValue = "Able",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				relatedEntryFieldName = "name");
		}

		task ("When with putStudent and studentId including studentsSubjects with new Subject entries information to update Student entry") {
			var studentId = JSONPathUtil.getIdValue(response = ${response});

			CustomObjectAPI.updateObjectEntry(
				en_US_plural_label = "students",
				externalReferenceCode = "studentErc",
				fieldName = "name",
				fieldValue = "Bob",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				objectEntryId = ${studentId},
				relatedEntryFieldName = "name");
		}

		task ("Then Student entry is updated") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.items[*].name",
				en_US_plural_label = "students",
				expectedValues = "Bob");
		}

		task ("And Then new Subject entries are created") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "students",
				expectedValues = 1);

			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "subjects",
				expectedValues = 4);
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanCreateCustomObjectsEntriesWithPostChildObjectInManyToManyRelationship {
		property portal.acceptance = "true";

		task ("When creating a Subject entry with postSubject including studentsSubjects with Student entries information") {
			CustomObjectAPI.createObjectEntryWithField(
				en_US_plural_label = "subjects",
				fieldName = "name",
				fieldValue = "Math",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				relatedEntryFieldName = "name");
		}

		task ("Then both Subject and Student entries are created") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "students",
				expectedCount = 2);

			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "subjects",
				expectedCount = 1);
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanCreateCustomObjectsEntriesWithPostParentObjectInManyToManyRelationship {
		property portal.acceptance = "true";

		task ("When creating a Student entry with postStudent including studentsSubjects with Subject entries information") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				en_US_plural_label = "students",
				fieldName = "name",
				fieldValue = "Able",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				relatedEntryFieldName = "name");
		}

		task ("Then both Student and Subject entries are created") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "students",
				expectedCount = 1);

			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "subjects",
				expectedCount = 2);
		}
	}

	@description = "Ignore tests unitl LPS-169348 fixed"
	@disable-webdriver = "true"
	@ignore = "true"
	@priority = 4
	test CannotCreateCustomObjectsEntriesWithInvliadObjectFieldInNestedFieldInManyToManyRelationship {
		property portal.acceptance = "true";

		task ("When creating a Student entry with postStudent including studentsSubjects with nonexistent field in Subject entries") {
			CustomObjectAPI.createObjectEntryWithField(
				en_US_plural_label = "students",
				fieldName = "name",
				fieldValue = "Able",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 1,
				relatedEntryFieldName = "nonexistentField");
		}

		task ("Then no Student and Subject entries are created") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "students",
				expectedCount = 0);

			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "subjects",
				expectedCount = 0);
		}
	}

	@description = "Ignore tests unitl LPS-169348 fixed"
	@disable-webdriver = "true"
	@ignore = "true"
	@priority = 3
	test CannotCreateCustomObjectsEntriesWithNonexistentNestedFieldInManyToManyRelationships {
		property portal.acceptance = "true";

		task ("When creating a Student entry with postStudent including nonexistent nestedField with Subject entries information") {
			CustomObjectAPI.createObjectEntryWithField(
				en_US_plural_label = "subjects",
				fieldName = "name",
				fieldValue = "Math",
				nestedField = "nonexistentNestedField",
				numberOfRelatedObjectEntries = 1,
				relatedEntryFieldName = "name");
		}

		task ("Then no Student and Subject entries are created") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "students",
				expectedCount = 0);

			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.totalCount",
				en_US_plural_label = "subjects",
				expectedCount = 0);
		}
	}

	@disable-webdriver = "true"
	@priority = 3
	test CanUpdateCustomObjectEntriesWithPutChildObjectInManyToManyRelationship {
		property portal.acceptance = "true";

		task ("And Given Subject and Student entries with custom ERCs are created with postSubject including studentsSubjects with Student entries information") {
			var response = CustomObjectAPI.createObjectEntryWithField(
				en_US_plural_label = "subjects",
				externalReferenceCode = "subjectErc",
				fieldName = "name",
				fieldValue = "Math",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				relatedEntryExternalReferenceCode = "studentErc",
				relatedEntryFieldName = "name");
		}

		task ("When with putSubject and subjectId including studentsSubjects with modified names of Student entries and their ERCs to update Subject entry") {
			var subjectId = JSONPathUtil.getIdValue(response = ${response});

			CustomObjectAPI.updateObjectEntry(
				en_US_plural_label = "subjects",
				externalReferenceCode = "subjectErc",
				fieldName = "name",
				fieldValue = "English",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				objectEntryId = ${subjectId},
				relatedEntryExternalReferenceCode = "studentErc",
				relatedEntryFieldName = "name");
		}

		task ("Then both Student and Subject entries are updated") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.items[*].name",
				en_US_plural_label = "subjects",
				expectedValues = "English");

			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.items[*].name",
				en_US_plural_label = "students",
				expectedValues = "name0-update,name1-update");
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanUpdateCustomObjectEntriesWithPutParentObjectInManyToManyRelationship {
		property portal.acceptance = "true";

		task ("And Given Student and Subject entries with custom ERCs are created with postStudent including studentsSubjects with Subject entries information") {
			var response = CustomObjectAPI.createObjectEntryWithField(
				en_US_plural_label = "students",
				externalReferenceCode = "studentErc",
				fieldName = "name",
				fieldValue = "Able",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				relatedEntryExternalReferenceCode = "subjectErc",
				relatedEntryFieldName = "name");
		}

		task ("When with putStudent and studentId including studentsSubjects with modified names of Subject entries and their ERCs to update Student entry") {
			var studentId = JSONPathUtil.getIdValue(response = ${response});

			CustomObjectAPI.updateObjectEntry(
				en_US_plural_label = "students",
				externalReferenceCode = "studentErc",
				fieldName = "name",
				fieldValue = "Bob",
				nestedField = "studentsSubjects",
				numberOfRelatedObjectEntries = 2,
				objectEntryId = ${studentId},
				relatedEntryExternalReferenceCode = "subjectErc",
				relatedEntryFieldName = "name");
		}

		task ("Then both Student and Subject entries are updated") {
			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.items[*].name",
				en_US_plural_label = "students",
				expectedValues = "Bob");

			CustomObjectAPI.assertCorrectObjectEntryValuesInResponse(
				element = "$.items[*].name",
				en_US_plural_label = "subjects",
				expectedValues = "name0-update,name1-update");
		}
	}

}