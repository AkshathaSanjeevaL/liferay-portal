@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-10890=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test case for COMMERCE-11449. Supplier account type can be created and a user linked to that account can successfully log in"
	@priority = 5
	test CanCreateSupplierTypeAccountAndALinkedUser {
		property portal.acceptance = "true";

		task ("Given the admin navigates to Minium site -> Account Management") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");
		}

		task ("When the admin proceeds to create a supplier account") {
			CommerceAccountManagement.addAccount(
				accountName = "Supplier Account",
				accountType = "Supplier");
		}

		task ("Then the account is successfully created") {
			Click(locator1 = "Icon#ANGLE_LEFT_BACK");

			LexiconTable.viewTableEntryInfo(
				index = 5,
				tableEntry = "Supplier",
				tableEntryInfo = "Supplier");
		}

		task ("When the admin creates a user for that account") {
			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Supplier Account",
				userEmailAddress = "supplieruser@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplieruser@liferay.com");

			JSONUser.addUserToSite(
				groupName = "Minium",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("And the user proceeds to log in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("Then the user is successfully logged in") {
			AssertElementPresent(
				key_userName = "Supplier User",
				locator1 = "CommerceAccelerators#MINIUM_SIDEBAR_USER_NAME");
		}
	}

	@description = "This is a test case for COMMERCE-10923. Supplier account can be linked to a channel from UI."
	@priority = 5
	test CanLinkSupplierAccountToChannelViaUI {
		property portal.acceptance = "true";

		task ("Given an active business and 2 active supplier accounts are created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");

			for (var num : list "1,2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Supplier Account ${num}",
					accountEntryType = "Supplier");
			}
		}

		task ("And one inactive supplier account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Supplier Account 3",
				accountEntryStatus = "Inactive",
				accountEntryType = "Supplier");
		}

		task ("When admin goes to the Minium Portal channel") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");
		}

		task ("Then can view 'Link Channel to a Supplier' field is null by default and only Supplier Accounts are listed on the dropdown") {
			AssertElementPresent(
				entryName = "",
				key_fieldLabel = "Link Channel to a Supplier",
				key_index = 1,
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_ENTRY_POSITION");

			for (var accountNameWithIndex : list "Supplier Account 1:2,Supplier Account 2:3") {
				var accountName = StringUtil.extractFirst(${accountNameWithIndex}, ":");
				var index = StringUtil.extractLast(${accountNameWithIndex}, ":");

				AssertElementPresent(
					entryName = ${accountName},
					key_fieldLabel = "Link Channel to a Supplier",
					key_index = ${index},
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_ENTRY_POSITION");
			}
		}

		task ("And Business or Deactivated Accounts are not listed on the dropdown") {
			for (var index : list "1,2,3,4,5") {
				AssertElementNotPresent(
					entryName = "Commerce Account",
					key_fieldLabel = "Link Channel to a Supplier",
					key_index = ${index},
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_ENTRY_POSITION");
			}

			for (var index : list "1,2,3,4,5") {
				AssertElementNotPresent(
					entryName = "Supplier Account 3",
					key_fieldLabel = "Link Channel to a Supplier",
					key_index = ${index},
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_ENTRY_POSITION");
			}
		}

		task ("When admin selects Supplier Account 1 for the channel") {
			Select(
				key_fieldLabel = "Link Channel to a Supplier",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Supplier Account 1");

			Button.clickSave();
		}

		task ("Then Supplier Account 1 is linked successfully to the channel") {
			CommerceUtilities.checkSuccessAlertAppearsAndDisappears();

			AssertElementPresent(
				key_fieldLabel = "Link Channel to a Supplier",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Supplier Account 1");
		}
	}

	@description = "This is a test for COMMERCE-11608. Other account roles like a buyer who belongs to a supplier account cannot manage the channel page"
	@priority = 4
	test CannotManageChannelWhenUsersInOtherAccountRoles {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a buyer user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userScreenName = "buyeruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Buyer",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And a channel is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Commerce Supplier");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Supplier Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When the buyer logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");
		}

		task ("Then the buyer cannot reach the Channels Page on the Admin Menu") {
			CommerceChannels.openChannelsAdmin();

			AssertElementPresent(
				locator1 = "Message#ERROR",
				value1 = "You do not have the roles required to access this portlet.");
		}
	}

	@description = "This is a test for COMMERCE-11865. As a supplier account user, I cannot access the channel panel after removing the permissions for Access in Control Panel for Channel"
	@priority = 4
	test CannotSupplierUserAccessChannelPanelAfterRemovingPermissions {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplieruser@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplieruser@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("And a channel is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Commerce Supplier");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Supplier Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When admin removes the supplier's permission with Access in Control Panel for Channel") {
			Permissions.removePermissionViaAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_commerce_channel_web_internal_portlet_CommerceChannelsPortlet",
				roleTitle = "Supplier");
		}

		task ("And the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplieruser@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier user cannot view the Channel panel") {
			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Commerce");

			AssertElementNotPresent(
				key_category = "Store Management",
				key_portlet = "Channels",
				locator1 = "ApplicationsMenu#PORTLET");
		}

		task ("And cannot navigate to the Channels panel by URL either") {
			CommerceChannels.openChannelsAdmin();

			AssertElementPresent(
				locator1 = "Message#ERROR",
				value1 = "You do not have the roles required to access this portlet.");
		}
	}

	@description = "This is a test for COMMERCE-11866. If a linked supplier account to a channel is removed, the supplier account user cannot view any channels"
	@priority = 4
	test CannotSupplierUserViewAUnlinkedChannel {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplieruser@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplieruser@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("And a channel is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Commerce Supplier");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Supplier Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplieruser@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier user can view the Supplier Channel that the account is linked to") {
			CommerceChannels.openChannelsAdmin();

			AssertElementPresent(
				key_entryName = "Supplier Channel",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When admin unlinks the Supplier account for Supplier Channel") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Supplier Channel");

			Select(
				key_fieldLabel = "Link Channel to a Supplier",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "");

			Button.clickSave();
		}

		task ("Then the supplier cannot see any channel entries displayed") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplieruser@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceChannels.openChannelsAdmin();

			AssertTextEquals(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No Results Found");
		}
	}

	@description = "This is a test for COMMERCE-11516. When a supplier account is deleted after being linked to a catalog, the account will not be shown as linked to the catalog"
	@priority = 3
	test CannotViewDeletedSupplierAccountLinkedToCatalogViaAPI {
		property portal.acceptance = "false";

		task ("Given a 'Supplier' type of account is created") {
			CommerceJSONAccountsAPI._addCommerceAccount(
				accountName = "Supplier Account",
				accountType = "Supplier",
				externalReferenceCode = "Supplier Account ERC");
		}

		task ("And a catalog is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Supplier Account");

			CommerceJSONCatalogsAPI._addCatalog(
				accountEntryId = ${accountEntryId},
				catalogName = "Test Catalog");
		}

		task ("When the supplier account is deleted") {
			CommerceJSONAccountsAPI._deleteAllCommerceAccounts();
		}

		task ("Then the supplier account will not be shown as linked to the catalog") {
			var accountId = CommerceJSONCatalogsAPI._getCommerceAccountIdByCatalogId(catalogName = "Test Catalog");

			TestUtils.assertNotEquals(
				actual = ${accountId},
				expected = ${accountEntryId});
		}
	}

	@description = "This is a test for COMMERCE-11516. When a supplier account is deleted after being linked to a channel, the account will not be shown as linked to the channel"
	@priority = 3
	test CannotViewDeletedSupplierAccountLinkedToChannelViaAPI {
		property portal.acceptance = "false";

		task ("Given a 'Supplier' type of account is created") {
			CommerceJSONAccountsAPI._addCommerceAccount(
				accountName = "Supplier Account",
				accountType = "Supplier",
				externalReferenceCode = "Supplier Account ERC");
		}

		task ("And a channel is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Supplier Account");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When the supplier account is deleted") {
			CommerceJSONAccountsAPI._deleteAllCommerceAccounts();
		}

		task ("Then the supplier account will not be shown as linked to the channel") {
			var accountId = CommerceJSONChannelsAPI._getCommerceAccountIdByChannelId(channelName = "Test Channel");

			TestUtils.assertNotEquals(
				actual = ${accountId},
				expected = ${accountEntryId});
		}
	}

	@description = "COMMERCE-11604 | As a supplier account user, I want to be able to manage the catalogs the account is linked to"
	@priority = 5
	test CanSupplierUserManageCatalogs {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplier@liferay.com");
		}

		task ("And Supplier account is linked to a catalog") {
			var accountId = CommerceJSONAccountsAPI.getAccountFieldByAccountName(
				accountName = "Commerce Supplier",
				field = "id");

			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountId = ${accountId},
				catalogName = "Minium");
		}

		task ("And a price list and a promotion are created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier user can view only the catalog the account is linked to") {
			CommerceCatalog.openCatalogsAdmin();

			AssertElementPresent(
				key_entryName = "Minium",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			AssertElementNotPresent(
				key_entryName = "Master",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("And can add but cannot delete catalogs") {
			AssertElementPresent(locator1 = "Button#PLUS");

			AssertElementNotPresent(
				key_value = "Minium",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");
		}

		task ("When the supplier user navigates to a catalog details") {
			Click(
				key_firstColumnValue = "Minium",
				key_secondColumnValue = "USD",
				key_table = "",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("Then the user is able to edit the catalog fields") {
			CommerceCatalog.editCatalogEntry(
				catalogBasePriceList = "Test Price List",
				catalogBasePromotion = "Test Promotion",
				catalogCurrency = "Euro",
				catalogLanguage = "Catalan (Spain)",
				catalogNewName = "Minium 2");

			Click(
				key_firstColumnValue = "Minium 2",
				key_secondColumnValue = "EUR",
				key_table = "",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");

			CommerceEntry.viewCatalogsEntry(
				catalogBasePriceList = "Test Price List",
				catalogBasePromotion = "Test Promotion",
				catalogCurrency = "Euro",
				catalogLanguage = "Catalan (Spain)",
				catalogName = "Minium 2");
		}
	}

	@description = "This is a test for COMMERCE-11607. As a supplier account user, I want to be able to manage the channel the account is linked to"
	@priority = 5
	test CanSupplierUserManageChannel {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplieruser@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplieruser@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("And two channels are created and the supplier account is linked to Supplier Channel 1") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Commerce Supplier");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Supplier Channel 1",
				channelType = "site",
				currencyCode = "USD");

			CommerceJSONChannelsAPI._addChannel(
				channelName = "Supplier Channel 2",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When admin links the Supplier account for Supplier Channel 2") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Supplier Channel 2");

			Select(
				key_fieldLabel = "Link Channel to a Supplier",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Commerce Supplier");

			Button.clickSave();
		}

		task ("Then an error alert 'A supplier account can be linked only to one channel' is shown") {
			Alert.viewErrorMessage(errorMessage = "Error:A supplier account can be linked only to one channel.");
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplieruser@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier user can view only the Supplier Channel 1 that the account is linked to") {
			CommerceChannels.openChannelsAdmin();

			AssertElementPresent(
				key_entryName = "Supplier Channel 1",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			for (var channelName : list "Supplier Channel 2,Minium Portal") {
				AssertElementNotPresent(
					key_entryName = ${channelName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}
		}

		task ("And cannot add/delete channels, only can edit the channel") {
			AssertElementNotPresent(locator1 = "Button#PLUS");

			AssertElementNotPresent(
				key_value = "Supplier Channel 1",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			AssertElementPresent(
				key_firstColumnValue = "Supplier Channel 1",
				key_secondColumnValue = "Site",
				key_table = "",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("When the supplier user navigates to the channel details") {
			Click(
				key_firstColumnValue = "Supplier Channel 1",
				key_secondColumnValue = "Site",
				key_table = "",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("Then the user is able to edit the channel fields") {
			CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

			AssertElementPresent(
				key_entryName = "Money Order",
				key_entryStatus = "Active",
				key_table = "Payment Methods",
				locator1 = "CommerceEntry#TABLE_ENTRY_STATUS");
		}
	}

}