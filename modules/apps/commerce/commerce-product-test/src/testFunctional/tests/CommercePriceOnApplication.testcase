@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-11028=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-11030. Verify that the Request a Quote button is visible in the Mini Cart and in the Order's Details Page."
	@priority = 5
	test CanAssertRequestAQuoteButtonIsVisible {
		property portal.acceptance = "true";

		task ("Given 'Allow Request a Quote on a Fully Priced Cart' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("When the buyer user adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("Then the 'Request a Quote' button is visible in the Mini Cart") {
			CommerceNavigator.gotoMiniCart();

			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY");
		}

		task ("And after clicking the button, it is visible also in the Order's Details Page") {
			Button.click(button = "Request a Quote");

			var activeOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			WaitForElementPresent(locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_ID");

			var openOrderId = selenium.getText("CommerceOrders#PENDING_ORDERS_ORDER_ID");

			TestUtils.assertEquals(
				actual = ${activeOrderId},
				expected = ${openOrderId});

			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY");
		}
	}

	@description = "COMMERCE-11277. As a buyer user, I can create a Quote Request in the Open Order's Details Page by entering a personal message."
	@priority = 5
	test CanCreateQuoteRequest {
		property portal.acceptance = "true";

		task ("Given 'Allow Request a Quote on a Fully Priced Cart' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("And the buyer user clicks the 'Request a Quote' button in the Mini Cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Request a Quote");
		}

		task ("When the buyer clicks again the 'Request a Quote' button in the Open Order Details Page") {
			Click(
				buttonId = "requestQuote",
				locator1 = "Button#BUTTON_ID");
		}

		task ("Then the a modal named Request a Quote is shown") {
			AssertElementPresent(
				key_title = "Request a Quote",
				locator1 = "CommerceFrontStore#MODAL_TITLE");
		}

		task ("When the buyer submits the request after writing a message in the note area") {
			CommerceOrders.createQuoteRequest(quoteRequestValue = "I kindly request a quote for this product.");
		}

		task ("Then the quote request is placed with the status 'Quote Requested' in the Placed Order's Details Page") {
			AssertElementPresent(
				key_status = "Quote Requested",
				locator1 = "CommerceOrders#PLACED_ORDERS_DETAILS_STATUS");
		}

		task ("Then the quote request cannot be edited") {
			Click.javaScriptClick(locator1 = "CommerceFrontStore#ORDER_PAGES_NOTES_BUTTON");

			AssertTextNotPresent(
				locator1 = "CommerceAccelerators#PORTLET_CONTENT",
				value1 = "Edit");
		}
	}

}