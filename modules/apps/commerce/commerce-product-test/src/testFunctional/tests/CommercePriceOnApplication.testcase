@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-11028=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-11551 | As a buyer user, I want to be able to add to cart a 'Price On Application' sku via Quick Add to Cart"
	@priority = 5
	test CanAddPriceOnApplicationSkuViaQuickAdd {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And the admin marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When the buyer adds the 'Price On Application' product via Quick Add to Cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();

			CommerceNavigator.gotoMiniCart();

			FrontStore.quickAddToCartSearchAndSelectItem(orderItemSku = "MIN55861");

			Click(locator1 = "CommerceAccelerators#QUICK_ADD_TO_CART_BUTTON");
		}

		task ("Then the product is successfully added to the cart") {
			AssertElementPresent(
				key_cartItemName = "U-Joint",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME");

			// Add assertions for the pricing following COMMERCE-11276

		}
	}

	@description = "COMMERCE-11507. As an admin user with permission to manage quotes, I want to be able to mark a quote as processed in the order's admin page"
	@priority = 5
	test CanAdminUsersWithManageQuotePermissionProcessQuote {
		property portal.acceptance = "true";

		task ("Given 'Allow Request a Quote on a Fully Priced Cart' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("And an Operations Manager user is created Manage Quotes permission") {
			JSONUser.addUserWithRole(
				roleTitle = "Operations Manager",
				userEmailAddress = "om@liferay.com",
				userFirstName = "Operations",
				userLastName = "Manager",
				userScreenName = "operationsmanager");
		}

		task ("And the buyer user requests a quote for an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			var orderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Click(
				key_orderAuthor = "Buyer User",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

			CommerceOrders.createQuoteRequest(
				quoteRequestValue = "I kindly request a quote for this product.",
				requestAQuoteInOpenOrdersPage = "true");
		}

		task ("When the operations manager navigate to the order's admin page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Quote Requested");
		}

		task ("Then the user is not able to mark a quote as processed") {
			AssertElementNotPresent(
				key_index = "Quote Processed",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");
		}

		task ("And the step tracker shows 'Quote Requested' as active step") {
			AssertElementPresent(
				key_stepLabel = "Quote Requested",
				locator1 = "CommerceOrders#STEP_TRACKER_ACTIVE_STEP");

			AssertElementPresent(
				key_stepLabel = "Quote Processed",
				locator1 = "CommerceOrders#STEP_TRACKER_INACTIVE_STEP");
		}

		task ("When the Operations Manager role is given the Manage Quotes permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_QUOTES",
				resourceName = "com.liferay.commerce.order",
				roleTitle = "Operations Manager");
		}

		task ("Then the user is able to mark a quote as processed") {
			Refresh();

			AssertElementPresent(
				key_index = "Quote Processed",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

			Click(
				key_index = "Quote Processed",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");
		}

		task ("And the step tracker shows 'Quote Processed' as active step") {
			for (var status : list "Quote Requested,Quote Processed") {
				AssertElementPresent(
					key_stepLabel = ${status},
					locator1 = "CommerceOrders#STEP_TRACKER_COMPLETED_STEP");
			}
		}

		task ("And the buyer can see the 'Quote Processed' status on the order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

			AssertElementPresent(
				key_entry = ${orderId},
				key_status = "Quote Processed",
				locator1 = "CommerceOrders#PLACED_ORDERS_LIST_STATUS");

			Click(
				key_orderAuthor = "Buyer User",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

			AssertElementPresent(
				key_status = "Quote Processed",
				locator1 = "CommerceOrders#PLACED_ORDERS_DETAILS_STATUS");
		}
	}

	@description = "COMMERCE-11030. Verify that the Request a Quote button is visible in the Mini Cart and in the Order's Details Page."
	@priority = 5
	test CanAssertRequestAQuoteButtonIsVisible {
		property portal.acceptance = "true";

		task ("Given 'Allow Request a Quote on a Fully Priced Cart' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("When the buyer user adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("Then the 'Request a Quote' button is visible in the Mini Cart") {
			CommerceNavigator.gotoMiniCart();

			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY");
		}

		task ("And after clicking the button, it is visible also in the Order's Details Page") {
			Button.click(button = "Request a Quote");

			var activeOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			WaitForElementPresent(locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_ID");

			var openOrderId = selenium.getText("CommerceOrders#PENDING_ORDERS_ORDER_ID");

			TestUtils.assertEquals(
				actual = ${activeOrderId},
				expected = ${openOrderId});

			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY");
		}
	}

	@description = "COMMERCE-11277. As a buyer user, I can create a Quote Request in the Open Order's Details Page by entering a personal message."
	@priority = 5
	test CanCreateQuoteRequest {
		property portal.acceptance = "true";

		task ("Given 'Allow Request a Quote on a Fully Priced Cart' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("And the buyer user clicks the 'Request a Quote' button in the Mini Cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Request a Quote");
		}

		task ("When the buyer clicks again the 'Request a Quote' button in the Open Order Details Page") {
			Click(
				buttonId = "requestQuote",
				locator1 = "Button#BUTTON_ID");
		}

		task ("Then the a modal named Request a Quote is shown") {
			AssertElementPresent(
				key_title = "Request a Quote",
				locator1 = "CommerceFrontStore#MODAL_TITLE");
		}

		task ("When the buyer submits the request after writing a message in the note area") {
			CommerceOrders.createQuoteRequest(quoteRequestValue = "I kindly request a quote for this product.");
		}

		task ("Then the quote request is placed with the status 'Quote Requested' in the Placed Order's Details Page") {
			AssertElementPresent(
				key_status = "Quote Requested",
				locator1 = "CommerceOrders#PLACED_ORDERS_DETAILS_STATUS");
		}

		task ("Then the quote request cannot be edited") {
			Click.javaScriptClick(locator1 = "CommerceFrontStore#ORDER_PAGES_NOTES_BUTTON");

			AssertTextNotPresent(
				locator1 = "CommerceAccelerators#PORTLET_CONTENT",
				value1 = "Edit");
		}
	}

	@description = "COMMERCE-11548 | As an admin user, I want to be able to mark/unmark a sku as 'Price on Application'"
	@priority = 5
	test CanMarkSkuAsPriceOnApplication {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("When the admin marks the sku as 'Price on Application'") {
			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			MouseOver(
				key_label = "Price On Application",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_ICON");

			VerifyElementPresent(
				key_label = "Price On Application",
				key_text = "Do not set a base price for this product and instead require that buyers request a quote.",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_TEXT");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickPublish();
		}

		task ("Then the pricing fields are greyed out") {
			for (var text : list "Base Price,Promotion Price,Cost") {
				AssertElementPresent(
					key_text = ${text},
					locator1 = "CommerceEntry#ANY_TEXT_INPUT_DISABLED");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();
		}

		task ("And 'Price On Application' is shown as the active price") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("When the admin unmarks the sku as 'Price on Application'") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "false");

			Button.clickPublish();
		}

		task ("Then the pricing fields are not greyed out") {
			for (var text : list "Base Price,Promotion Price,Cost") {
				AssertElementPresent(
					key_text = ${text},
					locator1 = "TextInput#ANY");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();
		}

		task ("And the base price is shown as the active price") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "$ 24.00");
		}
	}

	@description = "COMMERCE-11549 | As an admin user, I want to be able to override 'Price On Application' set for the sku using a Price List"
	@priority = 5
	test CanPriceListPriceOverridePriceOnApplicationSet {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And the admin marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When a new price list is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List");
		}

		task ("And a price list entry is created for the same sku") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 20,
				priceListName = "Test Price List",
				productSKU = "MIN55861");
		}

		task ("Then the price list entry's price is shown as the active price") {
			var key_productName = "U-Joint";

			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementNotPresent(locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "$ 20.00");
		}

		task ("When the price list is removed") {
			CommerceJSONPriceListsAndPromotionsAPI._deleteCommercePriceList(priceListName = "Test Price List");
		}

		task ("Then 'Price On Application' is shown as the active price") {
			Refresh();

			AssertElementPresent(locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			var key_price = "20.00";

			AssertElementNotPresent(locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_FIELD");
		}
	}

	@description = "COMMERCE-11550 | As an admin user, I want to be able to override 'Price On Application' set for the sku using a Promotion"
	@priority = 5
	test CanPromotionPriceOverridePriceOnApplicationSet {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And the admin marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When a new promotion is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("And a promotion entry is created for the same sku") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 20,
				productSKU = "MIN55861",
				promotionName = "Test Promotion");
		}

		task ("Then the promotion entry's price is shown as the active price") {
			var key_productName = "U-Joint";

			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementNotPresent(locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			// Update price assertion following COMMERCE-11276

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceFrontStore#FS_PRODUCT_VALUE_PROMO_PRICE",
				value1 = "20.00");
		}

		task ("When the promotion is removed") {
			CommerceJSONPriceListsAndPromotionsAPI._deleteCommercePriceList(priceListName = "Test Promotion");
		}

		task ("Then 'Price On Application' is shown as the active price") {
			Refresh();

			AssertElementPresent(locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			// Update price assertion following COMMERCE-11276

			var key_element = " price-value-promo";
			var key_price = "20.00";

			AssertElementNotPresent(locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_FIELD");
		}
	}

}