@component-name = "portal-commerce"
definition {

	property custom.properties = "feature.flag.COMMERCE-11026=true${line.separator}jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-11438. CanChangesOnlyPropagateFromTheSupplierOrder"
	@priority = 4
	test CanChangesOnlyPropagateFromTheSupplierOrder {
		property portal.acceptance = "false";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a product with 'Master' catalog, a price and an inventory is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouse(
				latitude = 10,
				longitude = 0,
				warehouseName = "Test Warehouse");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Test Warehouse");
		}

		task ("And the 'Order Split By Catalog Action' health check is checked") {
			CommerceNavigator.goToHealthCheckAdmin();

			Click(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split By Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");
		}

		task ("And the buyer checkout an order with both Minium and Master catalogs products on Minium site") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,U-Joint") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("And the admin reaches the Orders Admin page and accepts the order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("When the admin reaches the Orders Admin page again and opens a supplier order using Simple Product") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 5.00");
		}

		task ("Then the product's quantity is editable") {
			CommerceOrders.editOrderItemDetails(
				orderItemQuantity = 3,
				orderItemSku = "TESTSKU");
		}

		task ("But the total price is not updated") {
			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = "3.00",
				productSku = "TESTSKU",
				productTotalPrice = "5.00");
		}

		task ("When the admin opens the customer order") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 44.00");
		}

		task ("Then the quantity is changed") {
			CommerceOrders.viewOrdersEntry(
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = 1,
				productSku = "MIN55861",
				productTotalPrice = "24.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = 3,
				productSku = "TESTSKU",
				productTotalPrice = "5.00");
		}

		task ("But if the admin changes the quantity inside the customer order") {
			CommerceOrders.editOrderItemDetails(
				orderItemQuantity = 6,
				orderItemSku = "TESTSKU");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = 1,
				productSku = "MIN55861",
				productTotalPrice = "24.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = "6.00",
				productSku = "TESTSKU",
				productTotalPrice = "5.00");
		}

		task ("Then the changes are not updated inside the supplier order") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 5.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = "3.00",
				productSku = "TESTSKU",
				productTotalPrice = "5.00");
		}
	}

	@description = "This is a test for COMMERCE-11437. CanCreateOrderUsingProductBundleCorrectly"
	@priority = 4
	test CanCreateOrderUsingProductBundleCorrectly {
		property portal.acceptance = "false";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a product with 'Master' catalog, a price and an inventory is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouse(
				latitude = 10,
				longitude = 0,
				warehouseName = "Test Warehouse");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Test Warehouse");
		}

		task ("And the 'Order Split By Catalog Action' health check is checked") {
			CommerceNavigator.goToHealthCheckAdmin();

			Click(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split By Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");
		}

		task ("And a product bundle using 2 options of products from different catalogs linked to a SKU is created") {
			for (var num : list "1,2") {
				CommerceProducts.openProductsAdmin();

				CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

				CommerceEntry.gotoMenuTab(menuTab = "Options");

				CommerceProductOptions.createProductOption(key_optionName = "Option${num}");

				CommerceEntry.gotoMenuTab(menuTab = "Options");

				CommerceProductOptions.editProductOption(
					key_option = "Option${num}",
					key_priceType = "Dynamic",
					productOptionPriceType = "true",
					productOptionRequired = "true",
					productOptionSkuContributor = "true");

				CommerceProductOptions.createProductOptionValue(key_name = "Value${num}");

				SelectFrame.selectFrameTop();

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				if (${num} == 1) {
					CommerceEntry.clickTableEntryEditButton(entryName = "Value${num}");

					SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

					Type(
						key_fieldLabel = "SKU",
						locator1 = "TextInput#GENERIC_TEXT_INPUT",
						value1 = "MIN55861");
				}
				else if (${num} == 2) {
					CommerceEntry.clickTableEntryEditButton(entryName = "Value${num}");

					SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

					Type(
						key_fieldLabel = "SKU",
						locator1 = "TextInput#GENERIC_TEXT_INPUT",
						value1 = "TESTSKU");
				}

				CommerceEntry.saveEntry();
			}

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();

			CommerceNavigator.gotoEntry(entryName = "VALUE1VALUE2");

			CommerceEntry.editSkuPricingAndInventory(
				basePrice = "20.00",
				italyQuantity = 20,
				publish = "true");
		}

		task ("When the buyer checkout an order with the product bundle on Minium site") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "ABS Sensor",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_VIEW_ALL_VARIANTS");

			FrontStore.addToCartFromProductDetails(
				productName = "ABS Sensor",
				productSku = "VALUE1VALUE2");

			CommerceNavigator.gotoMiniCart();

			CommerceNavigator.editMiniCartItemQuantity(
				cartItemSku = "VALUE1VALUE2",
				productQuantity = 3);

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.setAddress(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code");

			Click(locator1 = "Button#CONTINUE");

			Click(
				key_radioOption = "Standard",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Click(locator1 = "Button#CONTINUE");

			for (var productName : list "ABS Sensor,U-Joint,Simple Product") {
				AssertElementPresent(
					key_productName = ${productName},
					locator1 = "CommerceAccelerators#CHECKOUT_SUMMARY_PRODUCT_TABLE_PRODUCT");
			}

			Click(locator1 = "Button#CONTINUE");
		}

		task ("And the admin reaches the Orders Admin page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();
		}

		task ("When the admin changes the order status to 'Processing'") {
			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("Then the order is split based on the option selected for the product bundle during the checkout") {
			CommerceOrders.openOrdersAdmin();

			for (var productTotalPrice : list "$ 162.00,$ 132.00,$ 15.00") {
				AssertTextEquals(
					key_productTotalPrice = ${productTotalPrice},
					locator1 = "CommerceOrders#ORDER_DETAILS_TOTAL_PRICE",
					value1 = ${productTotalPrice});
			}

			Pagination.viewResults(results = "Showing 1 to 3 of 3 entries.");

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 162.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "49.00",
				productName = "ABS Sensor",
				productQuantity = 3,
				productSku = "VALUE1VALUE2",
				productTotalPrice = "147.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = 3,
				productSku = "MIN55861",
				productTotalPrice = "72.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = 3,
				productSku = "TESTSKU",
				productTotalPrice = "15.00");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 15.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = 3,
				productSku = "TESTSKU",
				productTotalPrice = "15.00");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 132.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "20.00",
				productName = "ABS Sensor",
				productQuantity = 3,
				productSku = "VALUE1VALUE2",
				productTotalPrice = "60.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = 3,
				productSku = "MIN55861",
				productTotalPrice = "72.00");
		}
	}

	@description = "This is a test for COMMERCE-11415. CanCreateTheActionUsingTheHealthCheck"
	@priority = 4
	test CanCreateTheActionUsingTheHealthCheck {
		property portal.acceptance = "false";

		task ("When the health check page is reached") {
			CommerceNavigator.goToHealthCheckAdmin();
		}

		task ("Then a new health check 'Order Split By Catalog Action' is present") {
			AssertElementPresent(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");
		}

		task ("And if the new health check is checked") {
			Click(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split By Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");
		}

		task ("Then a new Commerce Order action rule with default settings is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			SelectFrame(locator1 = "IFrame#IFRAME");

			Click(
				key_tabName = "Action Builder",
				locator1 = "ObjectAction#TAB_GENERIC");

			AssertElementPresent(locator1 = "ObjectAction#ENABLE_DISABLE_CONDITION");

			AssertTextEquals(
				locator1 = "ObjectAction#INPUT_EXPRESSION",
				value1 = "orderStatus = 10");

			AssertTextEquals(
				locator1 = "ObjectAction#SELECT_ACTION_TYPE",
				value1 = "Split Order By Catalog");
		}
	}

	@description = "This is a test for COMMERCE-11416. CanEditObjectCommerceOrderAction"
	@priority = 4
	test CanEditObjectCommerceOrderAction {
		property portal.acceptance = "false";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a product with 'Master' catalog, a price and an inventory is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouse(
				latitude = 10,
				longitude = 0,
				warehouseName = "Test Warehouse");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Test Warehouse");
		}

		task ("And an action with expression 'Order Status = 1' is created within Commerce Order object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "customAction",
				active = "true",
				inputExpression = "orderStatus = 1",
				thenAction = "Split Order By Catalog",
				whenAction = "On Order Status Update");
		}

		task ("When the buyer checkout an order with both Minium and Master catalogs products on Minium site") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,U-Joint") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("And the admin reaches the Orders Admin page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();
		}

		task ("Then the order is split into 3 items") {
			for (var productTotalPrice : list "$ 44.00,$ 5.00,$ 24.00") {
				AssertTextEquals(
					key_productTotalPrice = ${productTotalPrice},
					locator1 = "CommerceOrders#ORDER_DETAILS_TOTAL_PRICE",
					value1 = ${productTotalPrice});
			}

			Pagination.viewResults(results = "Showing 1 to 3 of 3 entries.");
		}
	}

	@description = "This is a test for COMMERCE-11417. CanTheHealthCheckVerifyIfSplitOrderByCatalogActionIsAlreadyPresent"
	@priority = 4
	test CanTheHealthCheckVerifyIfSplitOrderByCatalogActionIsAlreadyPresent {
		property portal.acceptance = "false";

		task ("Given an action with expression 'Test' is created within Commerce Order object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "customAction",
				active = "true",
				inputExpression = "Test",
				thenAction = "Split Order By Catalog",
				whenAction = "On Order Status Update");
		}

		task ("When the health check page is reached") {
			CommerceNavigator.goToHealthCheckAdmin();
		}

		task ("Then the 'Order Split By Catalog Action' health check is checked and non clickable") {
			Click(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split By Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");
		}

		task ("But if the admin goes back to change the Commerce Order object's Action from "Split Order By Catalog" to other one") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.editObjectAction(
				fieldName = "External Reference Code",
				inputExpressionValue = "",
				inputMethod = "false",
				thenAction = "Update an Object Entry",
				viewEntry = "Custom Action");
		}

		task ("Then the health check is clickable again") {
			CommerceNavigator.goToHealthCheckAdmin();

			AssertElementNotPresent(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "disabled",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			Click(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split By Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");
		}
	}

	@description = "This is a test for COMMERCE-11418. CanTheOrderBeSplitOnlyOnce"
	@priority = 5
	test CanTheOrderBeSplitOnlyOnce {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a product with 'Master' catalog, a price and an inventory is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouse(
				latitude = 10,
				longitude = 0,
				warehouseName = "Test Warehouse");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Test Warehouse");
		}

		task ("And 2 actions 'Split Order By Catalog' with the default settings are created within Commerce Order object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			for (var num : list "1,2") {
				ObjectAdmin.addObjectActionViaUI(
					actionLabel = "Custom Action ${num}",
					actionName = "customAction${num}",
					active = "true",
					inputExpression = "orderStatus = 10",
					thenAction = "Split Order By Catalog",
					whenAction = "On Order Status Update");
			}
		}

		task ("And the buyer checkout an order with both Minium and Master catalogs products on Minium site") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,U-Joint") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("When the admin reaches the Orders Admin page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();
		}

		task ("And the admin changes the order status to 'Processing'") {
			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("Then the order is split only once") {
			CommerceOrders.openOrdersAdmin();

			for (var productTotalPrice : list "$ 44.00,$ 5.00,$ 24.00") {
				AssertTextEquals(
					key_productTotalPrice = ${productTotalPrice},
					locator1 = "CommerceOrders#ORDER_DETAILS_TOTAL_PRICE",
					value1 = ${productTotalPrice});
			}

			Pagination.viewResults(results = "Showing 1 to 3 of 3 entries.");
		}
	}

	@description = "This is a test for COMMERCE-11421. CanTheOrderBeSplitOnlyOnceUsingTheCheckoutWorkflow"
	@priority = 5
	test CanTheOrderBeSplitOnlyOnceUsingTheCheckoutWorkflow {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a product with 'Master' catalog, a price and an inventory is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouse(
				latitude = 10,
				longitude = 0,
				warehouseName = "Test Warehouse");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Test Warehouse");
		}

		task ("And the 'Order Split By Catalog Action' health check is checked") {
			CommerceNavigator.goToHealthCheckAdmin();

			Click(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split By Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");
		}

		task ("And the buyer checkout an order with both Minium and Master catalogs products on Minium site") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,U-Joint") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("When the admin reaches the Orders Admin page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();
		}

		task ("And the admin changes the order status to 'Processing'") {
			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("Then the order is split into 3 items") {
			CommerceOrders.openOrdersAdmin();

			for (var productTotalPrice : list "$ 44.00,$ 5.00,$ 24.00") {
				AssertTextEquals(
					key_productTotalPrice = ${productTotalPrice},
					locator1 = "CommerceOrders#ORDER_DETAILS_TOTAL_PRICE",
					value1 = ${productTotalPrice});
			}

			Pagination.viewResults(results = "Showing 1 to 3 of 3 entries.");
		}

		task ("But if the admin changes the customer order status to 'On Hold'") {
			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 44.00");

			Click(
				key_text = "Hold",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("And if the admin changes the customer order status to 'Release Hold'") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "On Hold");

			Click(
				key_text = "Release Hold",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("Then the order is not split again") {
			CommerceOrders.openOrdersAdmin();

			for (var productTotalPrice : list "$ 44.00,$ 5.00,$ 24.00") {
				AssertTextEquals(
					key_productTotalPrice = ${productTotalPrice},
					locator1 = "CommerceOrders#ORDER_DETAILS_TOTAL_PRICE",
					value1 = ${productTotalPrice});
			}

			Pagination.viewResults(results = "Showing 1 to 3 of 3 entries.");
		}
	}

	@description = "This is a test for COMMERCE-11419. CanTheOrderBeSplitOnlyOnceWithDifferentOrderStatusRulesTriggers"
	@priority = 5
	test CanTheOrderBeSplitOnlyOnceWithDifferentOrderStatusRulesTriggers {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a product with 'Master' catalog, a price and an inventory is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouse(
				latitude = 10,
				longitude = 0,
				warehouseName = "Test Warehouse");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Test Warehouse");
		}

		task ("And 2 actions 'Split Order By Catalog' that one using health check, the other using expression 'orderStatus = 1' are created under Commerce Order object") {
			CommerceNavigator.goToHealthCheckAdmin();

			Click(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split By Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action 2",
				actionName = "customAction2",
				active = "true",
				inputExpression = "orderStatus = 1",
				thenAction = "Split Order By Catalog",
				whenAction = "On Order Status Update");
		}

		task ("And the buyer checkout an order with both Minium and Master catalogs products on Minium site") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,U-Joint") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("When the admin reaches the Orders Admin page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();
		}

		task ("Then the order is split into 3 items") {
			for (var productTotalPrice : list "$ 44.00,$ 5.00,$ 24.00") {
				AssertTextEquals(
					key_productTotalPrice = ${productTotalPrice},
					locator1 = "CommerceOrders#ORDER_DETAILS_TOTAL_PRICE",
					value1 = ${productTotalPrice});
			}

			Pagination.viewResults(results = "Showing 1 to 3 of 3 entries.");
		}

		task ("When the admin changes the order status to 'Processing'") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 44.00");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("Then the order is split only once") {
			CommerceOrders.openOrdersAdmin();

			for (var productTotalPrice : list "$ 44.00,$ 5.00,$ 24.00") {
				AssertTextEquals(
					key_productTotalPrice = ${productTotalPrice},
					locator1 = "CommerceOrders#ORDER_DETAILS_TOTAL_PRICE",
					value1 = ${productTotalPrice});
			}

			Pagination.viewResults(results = "Showing 1 to 3 of 3 entries.");
		}
	}

	@description = "This is a test for COMMERCE-11420. CanTheOrderSplitIsAppliedCorrectly"
	@priority = 5
	test CanTheOrderSplitIsAppliedCorrectly {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a product with 'Master' catalog, a price and an inventory is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouse(
				latitude = 10,
				longitude = 0,
				warehouseName = "Test Warehouse");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Test Warehouse");
		}

		task ("And the 'Order Split By Catalog Action' health check is checked") {
			CommerceNavigator.goToHealthCheckAdmin();

			Click(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split By Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");
		}

		task ("And the buyer checkout an order with both Minium and Master catalogs products on Minium site") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,U-Joint") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("When the admin reaches the Orders Admin page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();
		}

		task ("And the admin changes the order status to 'Processing'") {
			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("Then the order is split into 2 supplier orders, and all entries have the correct information") {
			CommerceOrders.openOrdersAdmin();

			for (var productTotalPrice : list "$ 44.00,$ 5.00,$ 24.00") {
				AssertTextEquals(
					key_productTotalPrice = ${productTotalPrice},
					locator1 = "CommerceOrders#ORDER_DETAILS_TOTAL_PRICE",
					value1 = ${productTotalPrice});
			}

			Pagination.viewResults(results = "Showing 1 to 3 of 3 entries.");

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 44.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = 1,
				productSku = "MIN55861",
				productTotalPrice = "24.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = 1,
				productSku = "TESTSKU",
				productTotalPrice = "5.00");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 5.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = 1,
				productSku = "TESTSKU",
				productTotalPrice = "5.00");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 24.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = 1,
				productSku = "MIN55861",
				productTotalPrice = "24.00");
		}
	}

	@description = "This is a test for COMMERCE-11428. CanTheSupplierOrderUseSameChannelAsTheCustomerOrder"
	@priority = 4
	test CanTheSupplierOrderUseSameChannelAsTheCustomerOrder {
		property portal.acceptance = "false";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a product with 'Master' catalog, a price and an inventory is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouse(
				latitude = 10,
				longitude = 0,
				warehouseName = "Test Warehouse");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Test Warehouse");
		}

		task ("And the 'Order Split By Catalog Action' health check is checked") {
			CommerceNavigator.goToHealthCheckAdmin();

			Click(
				key_buttonRowName = "Order Split By Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split By Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");
		}

		task ("And the buyer checkout an order with both Minium and Master catalogs products on Minium site") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,U-Joint") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("When the admin reaches the Orders Admin page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();
		}

		task ("And the admin changes the order status to 'Processing'") {
			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("Then the supplier orders use the same channel as the customer order") {
			CommerceOrders.openOrdersAdmin();

			for (var rowIndex : list "1,2,3") {
				AssertTextEquals(
					key_columnIndex = 4,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "Minium Portal");
			}
		}
	}

}