@component-name = "portal-solutions"
definition {
	property custom.properties = "feature.flag.LPS-165493=true";
	property osgi.modules.includes = "site-initializer-raylife-ap";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Raylife AP";
	var testSiteName = "Raylife AP";
	var testSiteURL = "raylife-ap";
	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();
			User.firstLoginPG();
		}
		task ("Create a new Raylife AP Site") {
			Site.openSitesAdmin();

			Raylife.createRaylifeSite(siteName = "Raylife D2C");

			Raylife.createRaylifeSite(siteName = "Raylife AP");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");
		RaylifeAP.tearDownCP();
		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

    @description = "Verify if the user can swicth between the cards."
	@priority = 3
	test IfCanSwitchBetweenCards {
		property test.name.skip.portal.instance = "RaylifeAPTypeOfInsurance#IfCanSwitchBetweenCards";

		// Skip portal instance due to LRQA-79129. Unskip after it is resolved
		task("Given the modal for new application is open"){
			RaylifeAP.goToRaylifeAPSiteWithRefresh();

			Click(
				locator1="Button#ANY",
				key_text="Application");
		}

		task("Then Assert if the user can switch between the cards"){
              
			RaylifeApApplication.modalOption(option="Business");  

			AssertElementPresent(
				locator1="RaylifeApplicationModal#MODAL_INSURANCE",
				key_text="Business");

			RaylifeApApplication.modalOption(option="Personal");  

			AssertElementPresent(
				locator1="RaylifeApplicationModal#MODAL_INSURANCE",
				key_text="Personal");

			Click(
				locator1="Button#ANY",
				key_text="Next");

			RaylifeApApplication.modalOption(option="Auto");

			AssertElementPresent(
				locator1="RaylifeApplicationModal#MODAL_INSURANCE",
				key_text="Auto");        
		}
    }

    @description = "Verify if when the user selects a card, go to next page and click on 'Previous' button the card still selected (active)."
	@priority = 4
	test IfCardStillSelectedWhenUserGoToPreviousPage {
		
	property test.name.skip.portal.instance = "RaylifeAPTypeOfInsurance#IfCardStillSelectedWhenUserGoToPreviousPage";

		// Skip portal instance due to LRQA-79129. Unskip after it is resolved

        task ("Given the New Application modal is open") {
			RaylifeAP.goToRaylifeAPSiteWithRefresh();
			RaylifeApApplication.modalFlow(
				insurance="Personal",
				button="Previous");
		}

		task("Then Assert that the Insurance options is still active after click in 'previous' button") {
			AssertElementNotPresent(
				locator1="RaylifeApplicationModal#MODAL_INSURANCE",
				key_text="Business");

			AssertElementPresent(
				locator1="RaylifeApplicationModal#MODAL_INSURANCE",
				key_text="Personal");
		}
    }

    @description = "Verify if the 'New Applications' button from the side-bar option 'Applications', works."
	@priority = 5
	test IfNewApplicationsFromSideBarWorks {
		property test.name.skip.portal.instance = "RaylifeAPTypeOfInsurance#IfNewApplicationsFromSideBarWorks";

		// Skip portal instance due to LRQA-79129. Unskip after it is resolved

		task("Given the modal new application is open by side-bar option"){
			RaylifeAP.goToRaylifeAPSiteWithRefresh();

			RaylifeAPNavigator.gotoSidebarItem(itemName = "Applications");

			Click(
				locator1="Button#ANY",
				key_text="New Applications");
		}

		task("Then Assert that the modal is open"){

		AssertElementPresent(
			locator1="RaylifeApplicationModal#MODAL_DESCRIPTION",
			key_text="What type of insurance does this customer need?");
		}

    }
}