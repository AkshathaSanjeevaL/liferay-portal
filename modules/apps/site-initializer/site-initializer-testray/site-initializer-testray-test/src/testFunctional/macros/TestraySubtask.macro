definition {

	macro setupForSubtaskAPI {

			var projectId = TestrayAPI.createProjectAPI(
				projectDescription = "Projects_1 Project Description",
				projectName = "Projects_1 Project");

			var routineId = TestrayAPI.createRoutineAPI(
				routineName = "Routines_1 Routine",
				autoanalyze = "false",
				projectId = "${projectId}");

			var productVersionId = TestrayAPI.createProductVersionAPI(
				productVersion = "1.2",
				projectId = "${projectId}");

			var caseTypeId = TestrayAPI.createCaseTypeAPI(caseType = "Case_Type");

			var teamId = TestrayAPI.createTeamAPI(
				teamName = "Teams_1 Team",
				projectId = "${projectId}");

			var componentId = TestrayAPI.createComponentAPI(
				componentName = "Components_1 Project",
				teamId = "${teamId}",
				projectId = "${projectId}");

			var casesId = TestrayAPI.createCasesAPI(
				casesName = "Cases_1 Case",
				description = "Cases_1 Case Description",
				estimatedDuration = "60",
				numberPriority = "5",
				priority = "5",
				steps = "Auto Test Steps",
				caseTypeId = "${caseTypeId}",
				componentId = "${componentId}",
				projectId = "${projectId}");

			var casesId_2 = TestrayAPI.createCasesAPI(
				casesName = "Cases_2 Case",
				description = "Cases_2 Case Description",
				estimatedDuration = "40",
				numberPriority = "5",
				priority = "5",
				steps = "Auto Test Steps",
				caseTypeId = "${caseTypeId}",
				componentId = "${componentId}",
				projectId = "${projectId}");

			var casesId_3 = TestrayAPI.createCasesAPI(
				casesName = "Cases_3 Case",
				description = "Cases_3 Case Description",
				estimatedDuration = "20",
				numberPriority = "5",
				priority = "5",
				steps = "Auto Test Steps",
				caseTypeId = "${caseTypeId}",
				componentId = "${componentId}",
				projectId = "${projectId}");

			var casesId_4 = TestrayAPI.createCasesAPI(
				casesName = "Cases_4 Case",
				description = "Cases_4 Case Description",
				estimatedDuration = "10",
				numberPriority = "5",
				priority = "5",
				steps = "Auto Test Steps",
				caseTypeId = "${caseTypeId}",
				componentId = "${componentId}",
				projectId = "${projectId}");

			var buildId = TestrayAPI.createBuildAPI(
				buildPromoted = "false",
				description = "Builds_1 Project Description",
				template = "true",
				statusTemplate = "true",
				buildName = "Builds_1 Project",
				gitHash = "12345",
				productVersionId = "${productVersionId}",
				projectId = "${projectId}",
				routineId = "${routineId}");

			var runId = TestrayAPI.createRunAPI(
				runName = "Tomcat 6.0 | Chrome 57",
				runNumber = "1",
				buildId = "${buildId}");

			var caseResultId = TestrayAPI.createCaseResultAPI(
				key = "UNTESTED",
				statusCaseResult = "Untested",
				buildId = "${buildId}",
				casesId = "${casesId}",
				componentId = "${componentId}",
				runId = "${runId}");

			var caseResultId_2 = TestrayAPI.createCaseResult2API(
				key = "UNTESTED",
				statusCaseResult = "Untested",
				buildId = "${buildId}",
				casesId_2 = "${casesId_2}",
				componentId = "${componentId}",
				runId = "${runId}");

			var caseResultId_3 = TestrayAPI.createCaseResult3API(
				key = "UNTESTED",
				statusCaseResult = "Untested",
				buildId = "${buildId}",
				casesId_3 = "${casesId_3}",
				componentId = "${componentId}",
				runId = "${runId}");

			var caseResultId_4 = TestrayAPI.createCaseResult4API(
				key = "UNTESTED",
				statusCaseResult = "Untested",
				buildId = "${buildId}",
				casesId_4 = "${casesId_4}",
				componentId = "${componentId}",
				runId = "${runId}");

			var taskId = TestrayAPI.createTaskAPI(
				taskName = "Task_1",
				key = "INANALYSIS",
				statusTask = "In Analysis",
				buildId = "${buildId}");

			var subtaskId = TestrayAPI.createSubtaskAPI(
				subtaskNumber = "1",
				subtaskName = "Subtask_1",
				score = "5",
				key = "OPEN",
				statusSubtask = "Open",
				taskId = "${taskId}");

			var subtaskId_2 = TestrayAPI.createSubtask2API(
				subtaskNumber = "2",
				subtaskName = "Subtask_2",
				score = "5",
				key = "OPEN",
				statusSubtask = "Open",
				taskId = "${taskId}");

			var caseResultsForSubtaskId = TestrayAPI.createCaseResultsForSubtaskAPI(
				name = "caseResult_1",
				caseResultId = "${caseResultId}",
				subtaskId = "${subtaskId}");

			var caseResultsForSubtaskId_2 = TestrayAPI.createCaseResultsForSubtask2API(
				name = "caseResult_2",
				caseResultId_2 = "${caseResultId_2}",
				subtaskId = "${subtaskId}");

			var caseResultsForSubtaskId_3 = TestrayAPI.createCaseResultsForSubtask3API(
				name = "caseResult_3",
				caseResultId_3 = "${caseResultId_3}",
				subtaskId_2 = "${subtaskId_2}");

			var caseResultsForSubtaskId_4 = TestrayAPI.createCaseResultsForSubtask4API(
				name = "caseResult_4",
				caseResultId_4 = "${caseResultId_4}",
				subtaskId_2 = "${subtaskId_2}");
	}

	macro assertMergedSubtasks {
		for (var subtaskMerged : list "${listSubtaskMerged}") {
			AssertElementPresent(
				key_subtaskMerged = "${subtaskMerged}",
				locator1 = "TestraySubtask#VERIFY_SUBTASK_MERGED");
		}
	}

	macro goToSubtask {
		Click(
			key_projectName = "${subtaskName}",
			locator1 = "Testray#ITEM_NAME");
	}

	macro mergeSubtasks {
		for (var subtaskName : list "${wcsubtaskName}") {
			Click.clickAtNotVisible(
				key_checkboxOption = "${subtaskName}",
				locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");
		}

		if (isSet(cancel)) {
			Button.click(button = "${cancel}");
		}

		Button.click(button = "Merge Subtasks");
	}

	macro verifySubtaskDetails {
		AssertElementPresent(
			key_comment = "${comment}",
			key_issues = "${issues}",
			key_score = "${score}",
			key_status = "${status}",
			key_updated = "${updated}",
			key_userName = "${userName}",
			locator1 = "TestraySubtask#SUBTASK_DETAILS");
	}

}