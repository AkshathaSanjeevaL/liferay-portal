@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
    var teamName = "Team 1";
    var routineName = "Routine 1";
	var runName = "Option 1";
	var caseResultName = "case result 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTR2Site(siteName = ${testSiteName});

            JSONUser.addUser(
				userEmailAddress = "user@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("create all objects: projects, routine, teams, components, cases, case type, enviroment factors, product version, build, category, options, run and case results") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 1");

            JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 2");

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = "Routine 1");

            JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = "Routine 2");

            JSONTestray.addCaseType(caseType = "Case Type 2");

			JSONTestray.addCases(
				caseName = "Case 1",
				caseType = "Case Type 1",
				componentName = ${componentName},
				projectName = ${projectName});

            JSONTestray.addCases(
				caseName = "Case 2",
				caseType = "Case Type 2",
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = "7.0",
				projectName = ${projectName});

			JSONTestray.addProductVersion(
				productVersion = "1.2",
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = "Build 1",
				productVersion = "7.0",
				projectName = ${projectName},
				routineName = "Routine 1");

            JSONTestray.addBuild(
				buildName = "Build 2",
				productVersion = "1.2",
				projectName = ${projectName},
				routineName = "Routine 2");

			JSONTestray.addRun(
				buildName = "Build 1",
				runName = "Run 1");

            JSONTestray.addRun(
				buildName = "Build 2",
				runName = "Run 2");

			JSONTestray.addCaseResult(
				buildName = "Build 1",
				caseName = "Case 1",
				caseResultName = "case result 1",
				componentName = ${componentName},
				runName = "Run 1");

            JSONTestray.addCaseResult(
				buildName = "Build 2",
				caseName = "Case 1",
				caseResultName = "case result 2",
				componentName = ${componentName},
				runName = "Run 2");
		}

		task ("Go to the case history page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});

            TestrayBuild.goToBuild(buildName = ${buildName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "productversions",
			objectName = "1.2");

        JSONTestrayAPI.deleteObjectViaAPI(
			object = "productversions",
			objectName = "7.0");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "routines",
			objectName = "Routine 1");

        JSONTestrayAPI.deleteObjectViaAPI(
			object = "routines",
			objectName = "Routine 2");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "teams",
			objectName = "Team 1");

        JSONTestrayAPI.deleteObjectViaAPI(
			object = "teams",
			objectName = "Team 2");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = "Case Type 1");

        JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = "Case Type 2");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "factorcategories",
			objectName = "Category 1");

        JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by routine"
	@priority = 5
	test AdminCanFilterCaseHistoryByRoutine {
		task ("Given that the user has two routine different in the table") {
            TestrayResults.goToCaseResults(caseResultsName = "Case 1");

            Testray.projectTabNavigator(navTabName = "History");

			Testray.assertItemName(key_name = "Routine 1");

            Testray.assertItemName(key_name = "Routine 2");
		}

		task ("When the user select a routine called routine 1 in the filter") {
			TestrayFilter.clickFilter();

			Select(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Routines",
				value1 = "Routine 1");

			Button.click(button = "Apply");
		}

        task ("Then the user see only the routine 1 in the table") {
			Testray.assertItemName(key_name = "Routine 1");
		}

		task ("And do not see Routine 2 in the table") {
			Testray.assertItemNotPresent(key_name = "Routine 2");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by product version name"
	@priority = 5
	test AdminCanFilterCaseHistoryByProductVersionName {
		task ("Given that the user has two product version different in the table") {
            TestrayResults.goToCaseResults(caseResultsName = "Case 1");

            Testray.projectTabNavigator(navTabName = "History");

			Testray.assertItemName(key_name = "7.0");

            Testray.assertItemName(key_name = "1.2");
		}

		task ("When the user filter a product version by name") {
			TestrayFilter.clickFilter();

			TestrayFilter.multiSelect(
				header = "Product Version Name",
				label = "Product Version Name",
				listMultiSelect = "7.0");

			TestrayFilter.assertMultiSelect(
				label = "Product Version Name",
				listMultiSelect = "7.0");

			Button.click(button = "Apply");
		}

		task ("Then the user see only product version 7.0 in the table") {
			Testray.assertItemName(key_name = "7.0");
		}

		task ("And do not see the product version 1.2 in the table") {
			Testray.assertItemNotPresent(key_name = "1.2");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should not see case results that don't exist when I try filtering for them"
	@priority = 5
	test AdminCanFilterForNonexistantCaseResultHistory {
		task ("Given that the user add a issues in the case result") {
            TestrayResults.goToCaseResults(caseResultsName = "Case 1");

			Button.click(button = "Assign to Me");

			Button.click(button = "Complete Test");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-111111",
				selectStatus = "Test Fix");

			WaitForPageLoad();
		}

		task ("And that the issues appears in the table") {
            Testray.projectTabNavigator(navTabName = "History");

			Testray.assertItemName(key_name = "LPS-111111");
		}

		task ("When the user filters a issues by its non-existent name") {
			TestrayFilter.clickFilter();

			Type(
				key_label = "Issues",
				locator1 = "TextArea#ANY_LABELED",
				value1 = "LPS-123456");

			Button.click(button = "Apply");
		}

		task ("Then can see message no results found") {
			TestrayFilter.assertNoResultsFound();
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by issues"
	@priority = 4
	test AdminCanFilterHistoryByIssue {
		task ("Given that the user add a issue in the case result") {
            TestrayResults.goToCaseResults(caseResultsName = "Case 1");

			Button.click(button = "Assign to Me");

			Button.click(button = "Complete Test");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-123456",
				selectStatus = "Test Fix");

			WaitForPageLoad();
		}

		task ("When the user filter a issue") {
			Testray.projectTabNavigator(navTabName = "History");

			TestrayFilter.clickFilter();

			Type(
				key_label = "Issues",
				locator1 = "TextArea#ANY_LABELED",
				value1 = "LPS-123456");

			Button.click(button = "Apply");
		}

		task ("Then the user see the issue in the table") {
			Testray.assertItemName(key_name = "LPS-123456");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by status"
	@priority = 5
	test AdminCanFilterCaseHistoryByStatus {
		task ("Given that the user complete a test with passed status") {
			TestrayResults.goToCaseResults(caseResultsName = "Case 1");

			Testray.projectTabNavigator(navTabName = "History");

			AssertElementNotPresent(
				key_label = "Test History",
				key_status = "Passed",
				locator1 = "TestrayTestflow#TESTFLOW_STATUS");

			Testray.projectTabNavigator(navTabName = "Result");

			Button.click(button = "Assign to Me");

			Button.click(button = "Complete Test");

			TestrayTestflow.editStatus(selectStatus = "Passed");

			WaitForPageLoad();
		}

		task ("When the user filter a case result with passed status") {
			Testray.projectTabNavigator(navTabName = "History");

			TestrayFilter.clickFilter();

			Click.clickAtNotVisible(
				locator1 = "TestrayFilter#STATUS_IN_FILTER",
				key_label = "Status",
				key_status = "Passed");

			Button.click(button = "Apply");
		}

		task ("Then the user see passed status in the table") {
			Testray.assertItemName(key_name = "Passed");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by assignee"
	@priority = 5
	test AdminCanFilterCaseHistoryByAssignee {
		task ("Given that the user assign to me a case result") {
			TestrayResults.goToCaseResults(caseResultsName = "Case 1");

			TestrayTestflow.userAvatarNotPresent(
				label = "Dates",
				status = "Test Test");

			Button.click(button = "Assign to Me");
		}

		task ("When the user filter a case result by assign") {
			Testray.projectTabNavigator(navTabName = "History");

			TestrayFilter.clickFilter();

			Select(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Assignee",
				value1 = "Test");

			Button.click(button = "Apply");
		}

		task ("Then the user sees only routine 1 that was assign to me in the table") {
			Testray.assertItemName(key_name = "Routine 1");
		}

		task ("And the user does not see routine 2 which has not been assigned in the table") {
			Testray.assertItemNotPresent(key_name = "Routine 2");
		}
	}

}