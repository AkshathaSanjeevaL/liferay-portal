@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var teamName = "Team 1";
	var runName = "Option 1";
	var caseResultName = "case result 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Setup for case results") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});
		}

		task ("Go to Testray 2 and change the pagination") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}
	}

	tearDown {
		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = ${caseType});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "factorcategories",
			objectName = "Category 1");

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-162255 | Test Summary: Verify that can back from section project through Breadcrumb Finder"
	@priority = 3
	test AssertCanBackSectionByBreadcrumb {
		property test.name.skip.portal.instance = "TestrayBreadcrumbFinder#AssertCanBackSectionByBreadcrumb";

		task ("Given that the user go to case results") {
            Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

        task ("And the user access the Breadcrumb") {
			Testray.gotoBreadcrumb();
		}

		task ("When the user back from section project through Breadcrumb") {
			Testray.gotoBackBreadcrumb(value = "Project 1");

            Testray.confirmBreadcrumb();
		}

		task ("Then the user can back to the routine page") {
			AssertElementPresent(
				key_projectName = ${routineName},
				locator1 = "Testray#ITEM_NAME");
		}
	}

}