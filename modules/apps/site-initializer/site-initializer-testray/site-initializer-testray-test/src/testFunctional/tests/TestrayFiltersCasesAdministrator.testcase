@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var projectName = "Project 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Given that I create all the necessary objects") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addCases(
                description = "Description 1",
                steps = "Steps 1",
				caseName = "Case 1",
                priority = "5",
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

            JSONTestray.addCases(
                description = "Description 2",
                steps = "Steps 2",
				caseName = "Case 2",
                priority = "4",
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});  
		}

        task ("Go to the Cases page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

        JSONTestrayAPI.deleteObjectViaAPI(
			object = "teams",
			objectName = ${teamName});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = ${caseType});

        JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

    @description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by priority"
	@priority = 5
	test AdminCanFilterCaseByPriority {
		task ("When the user filter a case by priority") {
			TestrayFilter.clickFilter();

			Select(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Priority",
                value1 = "4");

            Button.click(button = "Apply");
		}

        task ("Then can see the filters apply in the list by priority") {
            TestrayCases.verifyCase(
				caseComponent = "Component 1",
				caseName = "Case 2",
				casePriority = 4);

		    Testray.assertItemNotPresent(key_name = "Case 1");
        }
	}

    @description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by case name"
	@priority = 5
	test AdminCanFilterCaseByCaseName {
		task ("When the user filter a case by name") {
			TestrayFilter.clickFilter();

			Type(
                key_fieldLabel = "Case Name",
                locator1 = "TextInput#GENERIC_TEXT_INPUT",
                value1 = "Case 1");

            Button.click(button = "Apply");
		}

        task ("Then can see the filters apply in the list by name") {
            TestrayCases.verifyCase(
				caseComponent = "Component 1",
				caseName = "Case 1",
				casePriority = 5);

		    Testray.assertItemNotPresent(key_name = "Case 2");
        }
	}

    @description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by description"
	@priority = 4
	test AdminCanFilterCaseByDescription {
		task ("Given the user selects the description column") {
            TestrayFilter.clickColumn();

            TestrayFilter.selectColumns(listColumn = "Description");
        }

        task ("When the user filter a case by description") {
            TestrayFilter.clickFilter();

			Type(
                locator1 = "TestrayCases#FIELD_DESCRIPTION",
                value1 = "Description 1");

            Button.click(button = "Apply");
		}

        task ("Then can see the filters apply in the list by description") {
            TestrayCases.verifyCase(
				caseComponent = "Component 1",
				caseName = "Case 1",
				casePriority = 5);

            Testray.assertItemName(key_name = "Description 1");

		    Testray.assertItemNotPresent(key_name = "Description 2");
        }
	}
}