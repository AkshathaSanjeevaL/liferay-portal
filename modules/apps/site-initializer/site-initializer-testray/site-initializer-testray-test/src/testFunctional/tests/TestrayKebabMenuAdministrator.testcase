@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var suiteName = "Suite 1";
	var teamName = "Team 1";
	var runName = "Option 1";
	var caseResultName = "case result 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Setup for case results") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});
		}

		task ("Go to Testray 2 and change the pagination") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = ${caseType});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "factorcategories",
			objectName = "Category 1");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "routines",
			objectName = ${routineName});

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-159526 | Test Summary: Verify if as an administrator can edit project in the kebab menu"
	@priority = 3
	test AdminCanEditProject {
		task ("Given that the user go to project") {
			Testray.goToProjectPage(projectName = ${projectName});
		}

		task ("When the user edit the project through kebab") {
			Testray.kebabMenuOption(kebabOption = "Edit Project");

			Testray.editProjectTestray(
				description = "Project Description Edited",
				name = "Project Edited");
		}

		task ("Then the user is redirected to the project page and can see the edited project title") {
            TestrayLayout.assertTabPageTitle(pageTabTitle = "Routines");

			TestrayHeader.assertBreadcrumbTitle(key_value = "Project Edited");
		}

        task ("Delete the project edited") {
            JSONTestrayAPI.deleteProject(projectName = "Project Edited");
		}
	}

	@description = "Story ID: LPS-159526 | Test Summary: Verify if as an administrator can edit routine in the kebab menu"
	@priority = 3
	test AdminCanEditRoutine {
		task ("Given that the user go to routine") {
			Testray.goToProjectPage(projectName = ${projectName});

            TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("When the user edit the routine through kebab") {
			Testray.kebabMenuOption(kebabOption = "Edit Routine");

            PortletEntry.inputName(name = "Routine Edited");

            PortletEntry.save();
		}

		task ("Then the user is redirected to the routine page and can see the edited routine title") {
            TestrayLayout.assertTabPageTitle(pageTabTitle = "Build History");

			TestrayHeader.assertBreadcrumbTitle(key_value = "Routine Edited");
		}

        task ("Delete the routine edited") {
            JSONTestrayAPI.deleteObjectViaAPI(
                object = "routines",
                objectName = "Routine Edited");
		}
	}

	@description = "Story ID: LPS-159526 | Test Summary: Verify if as an administrator can edit build in the kebab menu"
	@priority = 3
	test AdminCanEditBuild {
		task ("Given that the user go to build") {
			Testray.goToProjectPage(projectName = ${projectName});

            TestrayRoutines.goToRoutine(routineName = ${routineName});

            TestrayBuild.goToBuild(buildName = ${buildName});
		}

		task ("When the user edit the build through kebab") {
			Testray.kebabMenuOption(kebabOption = "Edit Build");

            TestrayBuild.editBuild(
				description = "Description Edited",
				fieldName = "Build Edited",
				gitHash = 12345,
				productVersion = "1.2",
				routine = "Routine 1");
		}

		task ("Then the user is redirected to the build page and can see the edited build title") {
            TestrayLayout.assertTabPageTitle(pageTabTitle = "Tests");

			TestrayHeader.assertBreadcrumbTitle(key_value = "Build Edited");
		}

        task ("Delete the build edited") {
            JSONTestrayAPI.deleteObjectViaAPI(
                object = "builds",
                objectName = "Build Edited");
		}
	}

}