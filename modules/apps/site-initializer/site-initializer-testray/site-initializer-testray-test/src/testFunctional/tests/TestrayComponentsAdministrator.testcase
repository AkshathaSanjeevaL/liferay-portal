@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var componentName = "Component 1";
	var projectName = "Project 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTR2Site(siteName = ${testSiteName});
		}

		task ("Given that I create all the necessary objects") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				teamName = ${teamName},
				projectName = ${projectName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "components",
			objectName = ${componentName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I should be able to add and delete a Component that doesn't have a Team"
	@priority = 5
	test AdminCanAddAndDeleteComponentWithoutTeam {
		task ("Given I go to Manage Component") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("When I add a new component without adding a team") {
			Testray.addNewComponent(componentName = ${componentName});
		}

		task ("And I assert that the Component was created") {
			Testray.assertItemName(text = ${componentName});

			Testray.assertItemNotPresent(text = ${teamName});
		}

		task ("Then I should be able to delete the component") {
			Testray.deleteComponent(itemName = ${componentName});

			Testray.assertItemNotPresent(itemName = ${componentName});
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I should be able to add and delete a Component that has a Team"
	@priority = 5
	test AdminCanAddAndDeleteComponentWithTeam {
		task ("Given that I create a new 'Component' via API") {
			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("When I go to Manage Component") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("And I assert that the component was created") {
			Testray.assertItemName(text = ${componentName});

			Testray.assertItemName(text = ${teamName});
		}

		task ("Then I delete the created component and I state that it does not appear in the list") {
			Testray.deleteComponent(itemName = ${componentName});

			Testray.assertItemNotPresent(itemName = ${componentName});
		}
	}

	@description = "Story ID: LPS-159528 LPS-156982 | Test Summary: Verify if as an Administrator I am able to add Components"
	@priority = 5
	test AdminCanAddComponent {
		task ("Given that I create a new 'Component' via API") {
			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("When I go to Manage Component") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("Then the component should appear on the list") {
			Testray.assertItemName(text = ${componentName});
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I am able to edit Components and change the assigned Team"
	@priority = 4
	test AdminCanEditChangeComponent {
		task ("Given that I create a new 'Team' and a new 'Component' via API") {
			JSONTestray.addTeam(
				teamName = "Team 2",
				projectName = ${projectName}); 

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And I go to Manage Teams and assert that the teams were created") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");

			Testray.assertItemName(text = ${teamName});

			Testray.assertItemName(text = "Team 2");
		}

		task ("When I go to Manage Components and edit the Team") {
			TestrayManage.closeModalInOptions();

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.assertItemName(text = ${componentName});

			Testray.assertItemName(text = ${teamName});

			SelectFrameTop();

			TestrayContextMenu.clickContextMenuProjects(name = ${componentName});

			Testray.editComponent(
				componentName = ${componentName},
				newComponentName = ${componentName},
				newTeamName = "Team 2");
		}

		task ("Then the team should be updated on the list") {
			Testray.assertItemName(text = "Team 2");
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify that as an Administrator I am able to edit Components while connecting a Team"
	@priority = 5
	test AdminCanEditComponent {
		task ("Given that I create a new 'Component' via API") {
			JSONTestray.addTeam(
				teamName = ${teamName},
				projectName = ${projectName}); 
		}
		task ("When I add a new Component without a Team") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(componentName = ${componentName});

			Testray.assertItemName(text = ${componentName});
		}

		task ("Then I should be able to edit the component and add a Team") {
			Testray.editComponent(
				componentName = ${componentName},
				newComponentName = "Component 1 Edited",
				newTeamName = ${teamName});

			Testray.assertItemName(text = "Component 1 Edited");

			Testray.assertItemName(text = ${teamName});
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate component"
	@priority = 5
	test AdminCanNotAddDuplicatedComponent {
		task ("Given that I create a new 'Component' via API") {
			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("When I go to Manage Component and try to add a component with a duplicate name") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.assertItemName(text = ${componentName});

			Testray.addNewComponent(componentName = ${componentName});
		}

		task ("Then an error message is displayed") {
			Alert.viewErrorMessage(errorMessage = "The Component name already exists");
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator when I search for a Component the system should return that component"
	@ignore = "Test Stub"
	@priority = 4
	test AdminCanSearchComponent {

		// TODO LPS-156995 AdminCanSearchComponent pending implementation

	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator when I search for a Component that does not exist the system should not return that component"
	@ignore = "Test Stub"
	@priority = 4
	test AdminCanSearchComponentNonExistent {

		// TODO LPS-156996 AdminCanSearchComponentNonExistent pending implementation

	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I can see the warning message 'This field is required' when trying to save without a name"
	@priority = 4
	test AdminCanViewWarningMessage {
		task ("Given I go to the Manage Component page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("When I try to add a component without a name") {
			Testray.addNewComponent(componentName = "");
		}

		task ("Then I assert that the 'Name' field is required") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}
	
}