@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var suiteName = "Suite 1";
	var teamName = "Team 1";
	var runName = "Option 1";
	var caseResultName = "case result 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Setup for SubtaskAPI") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});
		}

		task ("Go to Testray 2 and change the pagination") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = ${caseType});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "factorcategories",
			objectName = "Category 1");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "routines",
			objectName = ${routineName});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "projects",
			objectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a test for LPS-160701 - Verify if as an Administrator I am able to Assign Tests directly to me through the context menu"
	@priority = 4
	test AdminCanAssignTestsDirectlyThroughTheContextMenu {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("When the user goes to assign a case results") {
			TestrayContextMenu.clickContextMenuProjects(name = "Cases_1 Case");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign to Me");
		}

		task ("Then the user name appears") {
			TestrayTestflow.userAvatarPresent(label = "Tests");
		}
	}

	@description = "This is a test for LPS-160707 - Verify if as Add and Delete a Result by kebab button"
	@ignore = "true"
	@priority = 5
	test AdminCanDeleteResultByKebab {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("When the user goes to delete a case results by kebab") {
			TestrayResults.goToCaseResults(caseResultsName = "Cases_1 Case");

			Testray.kebabMenuOption(kebabOption = "Delete Case Result");

			AssertConfirm(value1 = "Are you sure you want to delete this item?");
		}

		task ("Then the Case Results should not be displayed anymore") {
			Testray.assertItemNotPresent(itemName = "Cases_1 Case");
		}
	}

	@description = "This is a test for LPS-160690 - Verify if as an Administrator I am able to Delete Results"
	@priority = 5
	test AdminCanDeleteResults {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("When the user goes to delete a case results") {
			TestrayContextMenu.clickContextMenuProjects(name = "Cases_1 Case");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this item?");
		}

		task ("Then the Case Results should not be displayed anymore") {
			Testray.assertItemNotPresent(itemName = "Cases_1 Case");
		}
	}

	@description = "This is a test for LPS-160689 - Verify if as an Administrator I am able to execute Tests and mark them as Failed"
	@priority = 5
	test AdminCanExecuteTestsAndMarkThemAsFailed {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("When the user goes to assign a case results and edit test for Failed") {
			TestrayContextMenu.clickContextMenuProjects(name = "Cases_1 Case");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayResults.goToCaseResults(caseResultsName = "Cases_1 Case");

			TestrayTestflow.userAvatarPresent(label = "Dates");

			Button.click(button = "Complete Test");

			TestrayTestflow.editStatus(
				issues = "LPS-111111",
				selectStatus = "Failed");
		}

		task ("Then the Failed status appear in the list") {
			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "Failed");
		}
	}

	@description = "This is a test for LPS-160687 - Verify if as an Administrator I am able to Quick Edit Tests"
	@priority = 4
	test AdminCanQuickEditTests {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("When the user goes to assign a case results and edit test for Test Fix") {
			TestrayResults.goToCaseResults(caseResultsName = "Cases_1 Case");

			Button.click(button = "Assign to Me");

			TestrayTestflow.userAvatarPresent(label = "Dates");

			Button.click(button = "Complete Test");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-111111",
				selectStatus = "Test Fix");
		}

		task ("Then the Test Fix status appear in the list") {
			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "Test Fix");
		}
	}

	@description = "This is a test for LPS-160686 - Verify if as an Administrator I am able to Reopen Tests"
	@priority = 4
	test AdminCanReopenTests {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("When the user goes to assign a case results and go to complete test") {
			TestrayResults.goToCaseResults(caseResultsName = "Cases_1 Case");

			Button.click(button = "Assign");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayTestflow.userAvatarPresent(label = "Dates");

			Button.click(button = "Complete Test");
		}

		task ("And the user edit test for Blocked status") {
			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-111111",
				selectStatus = "Blocked");

			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "Blocked");
		}

		task ("Then the user reopen test and in progress status appear in the list") {
			Button.click(button = "Reopen Test");

			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "In Progress");
		}
	}

	@description = "This is a test for LPS-167470 - Verify if as an Administrator I am able to reset Tests"
	@priority = 4
	test AdminCanResetTests {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("When the user goes to assign a case results with status in progress") {
			TestrayResults.goToCaseResults(caseResultsName = "Cases_1 Case");

			Button.click(button = "Assign to Me");

			TestrayTestflow.userAvatarPresent(label = "Dates");

			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "In Progress");
		}

		task ("Then the user reset test and Untested status appear in the list") {
			Button.click(button = "Reset Test");

			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "Untested");
		}
	}

	@description = "This is a test for LPS-160685 - Verify if as an Administrator I am able to Unassign Tests"
	@priority = 4
	test AdminCanUnassignTests {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("When the user goes to assign a case results and Unassign Myself a case results") {
			TestrayResults.goToCaseResults(caseResultsName = "Cases_1 Case");

			Button.click(button = "Assign to Me");

			TestrayTestflow.userAvatarPresent(label = "Dates");

			TestrayHeader.clickBreadcrumbTitle(breadcrumbName = "Builds_1 Project");

			TestrayContextMenu.clickContextMenuProjects(name = "Cases_1 Case");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Unassign Myself");
		}

		task ("Then the user name does not appear in the list") {
			TestrayTestflow.userAvatarNotPresent(label = "Tests");
		}
	}

	@description = "This is a test for LPS-160684 - Verify if as an Administrator I am able to Unassign Tests through the context menu"
	@priority = 3
	test AdminCanUnassignTestsThroughTheContextMenu {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("When the user goes to assign a case results and Unassign Myself a case results") {
			TestrayContextMenu.clickContextMenuProjects(name = "Cases_1 Case");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign to Me");

			TestrayTestflow.userAvatarPresent(label = "Tests");

			TestrayContextMenu.clickContextMenuProjects(name = "Cases_1 Case");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Unassign Myself");
		}

		task ("Then the user name does not appear in the list") {
			TestrayTestflow.userAvatarNotPresent(label = "Tests");
		}
	}

	@description = "This is a test for LPS-160691 - Verify if as an Administrator I am able to verify the accuracy of the Case Result Metrics Card"
	@ignore = "true"
	@priority = 5
	test AdminCanVerifyTheAccuracyOfTheCaseResultMetricsCard {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("Then can view test total in metrics of case results") {
			TestrayResults.caseResultsMetrics(totalTestCases = 1);
		}
	}

	@description = "This is a test for LPS-160683 - Verify if as an Administrator I am able to view Results grouped by Component"
	@priority = 3
	test AdminCanViewResultsGroupedByComponent {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("Then the user view resullts by component") {
			Testray.projectTabNavigator(navTabName = "Components");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.assertItemName(text = "Components_1 Project");
		}
	}

	@description = "This is a test for LPS-160682 - Verify if as an Administrator I am able to view Results grouped by Team"
	@priority = 3
	test AdminCanViewResultsGroupedByTeam {
		task ("Given that the user add a new case results") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.goToBuild(buildName = "Builds_1 Project");
		}

		task ("Then the user view resullts by team") {
			Testray.projectTabNavigator(navTabName = "Teams");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.assertItemName(text = "Teams_1 Team");
		}
	}

}