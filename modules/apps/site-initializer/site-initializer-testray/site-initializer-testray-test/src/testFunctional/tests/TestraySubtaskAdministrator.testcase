@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite();

			Refresh();
		}

		task ("Setup for Subtask") {
			TestraySubtask.setupForSubtaskAPI();

		}

		task ("Go to Testray 2 and go to TestFlow") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			TestrayTestflow.goToTestflow();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Testray.tearDownCP();

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a test for LPS-169401 - Verify if, as an Administrator, can cancel merge subtasks"
	@priority = "3"
	test AdminCanCancelMergeSubtask {
		task ("Given that the user trying merge subtasks") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");
		}

		task ("Then can clear the merge") {
			TestraySubtask.mergeSubtasks(
				cancel = "Clear",
				wcsubtaskName = "subtask_1,subtask_2");
		}
	}

	@description = "This is a test for LPS-169436 - Verify if as an Administrator I should be able to complete a subtask as Blocked"
	@priority = "5"
	test AdminCanCompleteSubtaskAsBlocked {
		task ("Given the user edit a Subtask as Blocked") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Complete");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166191",
				selectStatus = "Blocked");
		}

		task ("Then the complete status appears of the subtask with details") {
			TestraySubtask.goToSubtask(subtaskName = "sub tasks_1");

			TestraySubtask.verifySubtaskDetails(
				comment = "None",
				issues = "LPS-166191",
				score = "5",
				status = "Complete",
				updated = "a few seconds ago",
				userName = "Test");
		}
	}

	@description = "This is a test for LPS-160716 - Verify if as an Administrator I should be able to complete a subtask as failing"
	@priority = "5"
	test AdminCanCompleteSubtaskAsFailing {
		task ("Given the user edit a Subtask as Failed") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Complete");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166191",
				selectStatus = "Failed");
		}

		task ("Then the complete status appears of the subtask with details") {
			TestraySubtask.goToSubtask(subtaskName = "sub tasks_1");

			TestraySubtask.verifySubtaskDetails(
				comment = "None",
				issues = "LPS-166191",
				score = "5",
				status = "Complete",
				updated = "a few seconds ago",
				userName = "Test");
		}
	}

	@description = "This is a test for LPS-160717 - Verify if as an Administrator I should be able to complete a subtask as passing"
	@priority = "5"
	test AdminCanCompleteSubtaskAsPassing {
		task ("Given the user edit a Subtask as passed") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign to Me and Begin Analysis");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Complete");

			TestrayTestflow.editStatus(selectStatus = "Passed");
		}

		task ("Then the complete status appears of the subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Complete");
		}
	}

	@description = "This is a test for LPS-169435 - Verify if as an Administrator I should be able to complete a subtask as Test Fix"
	@priority = "5"
	test AdminCanCompleteSubtaskAsTestFix {
		task ("Given the user edit a Subtask as Test Fix") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestraySubtask.goToSubtask(subtaskName = "sub tasks_1");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			Button.click(button = "Complete");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166191",
				selectStatus = "Test Fix");
		}

		task ("Then the complete status appears of the subtask with details") {
			TestraySubtask.verifySubtaskDetails(
				comment = "None",
				issues = "LPS-166191",
				score = "5",
				status = "Complete",
				updated = "a few seconds ago",
				userName = "Test");
		}
	}

	@description = "This is a test for LPS-169399 - Verify is as an Administrator I should be able to merge a complete subtask with a complete subtask"
	@priority = "5"
	test AdminCanMergeCompletedSubtaskWithCompletedSubtask {
		task ("Given that the user complete a Subtask") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Complete");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166191",
				selectStatus = "Failed");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Complete");
		}

		task ("When that the user leave complete the other Subtask") {
			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_2");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_2");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Complete");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166192",
				selectStatus = "Test Fix");
		}

		task ("Then the user merged subtask with status complete") {
			TestraySubtask.mergeSubtasks(wcsubtaskName = "sub tasks_1,sub tasks_2");
		}
	}

	@description = "This is a test for LPS-169430 - Verify if as  an Administrator I should be able to merge an Complete subtask with a Open subtask"
	@priority = "5"
	test AdminCanMergeCompleteSubtaskWithOpenSubtask {
		task ("Given that the user complete a Subtask") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Complete");

			TestrayTestflow.editStatus(selectStatus = "Passed");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Complete");
		}

		task ("When that the user leave open the other Subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");
		}

		task ("Then the user merged subtask with status complete") {
			TestraySubtask.mergeSubtasks(wcsubtaskName = "sub tasks_1,sub tasks_2");
		}
	}

	@description = "This is a test for LPS-161402 - Verify if as  an Administrator I should be able to merge an in analysis subtask with a completed subtask"
	@priority = "5"
	test AdminCanMergeInAnalysisSubtaskWithCompletedSubtask {
		task ("Given that the user complete a Subtask") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayContextMenu.clickContextMenuProjects(name = "sub tasks_1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Complete");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166193",
				selectStatus = "Blocked");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Complete");
		}

		task ("When that the user leave in analysis the other Subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestraySubtask.goToSubtask(subtaskName = "sub tasks_2");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "In Analysis");
		}

		task ("Then the user merged subtask with status complete") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.goToTask(taskName = "Task_1");

			TestraySubtask.mergeSubtasks(wcsubtaskName = "sub tasks_1,sub tasks_2");
		}

		TestraySubtask.goToSubtask(subtaskName = "sub tasks_1");

		TestraySubtask.assertMergedSubtasks(listSubtaskMerged = "sub tasks_2, hgf");
	}

	@description = "This is a test for LPS-169400 - Verify is as an Administrator I should be able to merge an in analysis subtask with an in analysis subtask"
	@priority = "5"
	test AdminCanMergeInAnalysisSubtaskWithInAnalysisSubtask {
		task ("Given that the user in analysis a Subtask") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestraySubtask.goToSubtask(subtaskName = "sub tasks_1");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "In Analysis");

			TestrayHeader.clickBreadcrumbTitle(breadcrumbName = "Task_1");
		}

		task ("When that the user leave in analysis the other Subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestraySubtask.goToSubtask(subtaskName = "sub tasks_2");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "In Analysis");
		}

		task ("Then the user merged subtask with status in analysis") {
			TestrayHeader.clickBreadcrumbTitle(breadcrumbName = "Task_1");

			TestraySubtask.mergeSubtasks(wcsubtaskName = "sub tasks_1,sub tasks_2");
		}
	}

	@description = "This is a test for LPS-160723 - Verify if as an Administrator I should be able a subtask return to open"
	@priority = "5"
	test AdminCanReturnToOpenSubtask {
		task ("Given that the user Assign and Begin Analysis of the subtask") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestraySubtask.goToSubtask(subtaskName = "sub tasks_1");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "In Analysis");
		}

		task ("Then can return to open the subtask") {
			Button.click(button = "Return to open");

			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "Open");
		}
	}

	@description = "This is a test for LPS-160722 - Verify if as an Administrator I should be able to merge multiple unassigned subtasks"
	@priority = "5"
	test AdminShouldBeAbleToMergeMultipleUnassignedSubtasks {
		task ("Given that the user merged multiple unassigned subtasks") {
			TestrayTestflow.goToTask(taskName = "Task_1");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestraySubtask.mergeSubtasks(wcsubtaskName = "sub tasks_1,sub tasks_2");
		}

		task ("Then the user merged subtask with status complete") {
			TestraySubtask.mergeSubtasks(wcsubtaskName = "sub tasks_1,sub tasks_2");
		}
	}

}