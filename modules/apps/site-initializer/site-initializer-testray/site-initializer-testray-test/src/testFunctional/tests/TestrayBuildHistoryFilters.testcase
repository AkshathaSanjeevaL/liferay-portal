@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTR2Site(siteName = ${testSiteName});
		}

		task ("create all objects: projects, routine, teams, components, cases, case type, enviroment factors, product version, build, category and options") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = "7.0",
				projectName = ${projectName});

			JSONTestray.addProductVersion(
				productVersion = "1.2",
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = "Build 1",
				productVersion = "7.0",
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addBuild(
				buildName = "Build 2",
				productVersion = "1.2",
				projectName = ${projectName},
				routineName = ${routineName});
		}

		task ("Go to the build page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "productversions",
			objectName = ${productVersion});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "routines",
			objectName = ${routineName});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "teams",
			objectName = ${teamName});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = ${caseType});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "factorcategories",
			objectName = "Category 1");

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify if as an Administrator I should be able to filter build history by build name"
	@priority = 5
	test AdminCanFilterBuildHistoryByBuildName {
		task ("Given that the user has two builds different in the table") {
			Testray.assertItemName(key_name = "Build 1");

			Testray.assertItemName(key_name = "Build 2");
		}

		task ("When the user select the build 2 in the filter") {
			TestrayFilter.clickFilter();

			Type(
				locator1 = "TestrayManage#NEW_OPTION_NAME",
				value1 = "Build 2");

			Button.click(button = "Apply");
		}

		task ("Then the user see only build 2 in the table") {
			Testray.assertItemName(key_name = "Build 2");
		}

		task ("And do not see the build 1 in the table") {
			Testray.assertItemNotPresent(key_name = "Build 1");
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify if as an Administrator I should be able to filter build history by product version"
	@priority = 5
	test AdminCanFilterBuildHistoryByProductVersion {
		task ("Given that the user has two builds with different versions in the table") {
			Testray.assertItemName(key_name = "7.0");

			Testray.assertItemName(key_name = "1.2");
		}

		task ("When the user select product version 7.0 in the filter") {
			TestrayFilter.clickFilter();

			Select(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Product Version",
				value1 = "7.0");

			Button.click(button = "Apply");
		}

		task ("Then the user gets only products with version 7.0 in the table") {
			Testray.assertItemName(key_name = "7.0");
		}

		task ("And do not get the products with other versions in the table") {
			Testray.assertItemNotPresent(key_name = "1.2");
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify if as an Administrator I should be able to filter build history using multiple filtering options"
	@priority = 5
	test AdminCanFilterBuildHistoryWithMultipleOptions {
		task ("Given that the user has two builds different in the table") {
			Testray.assertItemName(key_name = "Build 1");

			Testray.assertItemName(key_name = "Build 2");
		}

		task ("When the user select multiple options in the filter") {
			TestrayFilter.clickFilter();

			Select(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Product Version",
				value1 = "7.0");

			Type(
				locator1 = "TestrayManage#NEW_OPTION_NAME",
				value1 = "Build 1");

			Button.click(button = "Apply");
		}

		task ("Then the user see only build 1 and version 7.0 in the table") {
			Testray.assertItemName(key_name = "Build 1");

			Testray.assertItemName(key_name = "7.0");
		}

		task ("And do not see the build 2 and version 1.2 in the table") {
			Testray.assertItemNotPresent(key_name = "Build 2");

			Testray.assertItemNotPresent(key_name = "1.2");
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify if as an Administrator I should not see build history that don't exist when I try filtering for them"
	@priority = 4
	test AdminCanFilterForNonexistantBuildHistory {
		task ("Given that the user has two builds different in the table") {
			Testray.assertItemName(key_name = "Build 1");

			Testray.assertItemName(key_name = "Build 2");
		}

		task ("When the user filters a build by its non-existent name") {
			TestrayFilter.clickFilter();

			Type(
				key_fieldLabel = "Build Name",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Build 3");

			Button.click(button = "Apply");
		}

		task ("Then the user can see message no results found") {
			TestrayFilter.assertNoResultsFound();
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify if as an Administrator I should be able to filter the filter options"
	@priority = 5
	test AdminCanFilterOptionsToFilter {
		task ("When the user searches for a field called product version") {
			TestrayFilter.clickFilter();

			TestrayFilter.searchFilter(value = "Product Version");
		}

		task ("Then the user can see the field label called product version") {
			AssertElementPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Product Version");
		}

		task ("When the user searches for a field that does not exist") {
			TestrayFilter.searchFilter(value = "Product Version 2");
		}

		task ("Then the user can no more see the label called product version in the filter") {
			AssertElementNotPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Product Version");
		}
	}

}