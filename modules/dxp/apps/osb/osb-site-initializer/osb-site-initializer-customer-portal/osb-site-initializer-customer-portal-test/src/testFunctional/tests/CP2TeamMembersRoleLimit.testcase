@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToAllAccounts();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

    @description = "Automation ID: LPS-150204 | Test Summary: Verify if the user can change an administrator role already selected to requester, or the requester role to administrator"
    @ignore = "true"
	@priority = "4"
    test ChangesToAlreadySelectedFunctions {

		// Needs refactor since it depends on example FIFA account

		var testAccount = "2022 FIFA World Cup Qatar - FAN ID";

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();
		}

		task ("Then I go to the Customer Portal Site") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			Refresh();
		}

		task ("And I enter the test account") {
			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Starting the Setup") {
			CustomerPortal.clickOnStartProjectSetup();
		}

		task ("Given that I invite a user into the project") {
			CP2TeamMembers.addFieldsTeamMembersExtra(
				position = "0",
				positionNumber = "0",
				rowEmail = "test01@project.com",
				rowRole = "Administrator");

			CP2TeamMembers.clickTeamMembersSendInvitation();
		}

		task ("Then I open the action menu and edit the invited user role") {
			CP2NavigationMenu.goToTeamMembers();

			CP2Utils.openActionMenu(
				menuItem = "Edit",
				openUser = "test01@project.com");

			CP2TeamMembers.tableChangeRole(
				roleDefault = "Administrator",
				changeRole = "Requester");

			CustomerPortal.clickAtButton(text = "Save");
		}

		task ("And I assert that the function has been changed") {
			CP2Utils.assertChangeRole(
				email = "test01@project.com",
				role = "Requester");
		}

		task ("Delete the entries and objects created") {
			CP2Utils.deleteSpecificObjectEntry(
				email = "test01@project.com",
				portlet = "Team Members Invitation");
		}
    }

    @descriprion = "Automation ID: LPS-150206 | Test Summary: Verify that below the number of seats the modal displays an explanation of the support tickets"
    @priority = "3"
    test CanViewTipMessage {
        
        // TODO LPS-150206 CanViewTipMessage pending implementation

    }

    @descriprion = "Automation ID: LPS-158568 | Test Summary: Verify that when the project reaches zero available support seats the administrator and requester roles are disabled in the drop-down list"
    @priority = "4"
    test AssertThatTheDropdownOptionsAreDisabled {
        
        // TODO LPS-158568 AssertThatTheDropdownOptionsAreDisabled pending implementation

    }

    @descriprion = "Automation ID: LPS-170211 | Test Summary: Assert that when the user reaches the limit of available support seats the User function becomes default for the next invited"
    @priority = "3"
    test AssertThatTheUserFunctionBecomesDefault {
        
        // TODO LPS-170211 AssertThatTheUserFunctionBecomesDefault pending implementation

    }

}