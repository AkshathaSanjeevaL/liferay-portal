/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.faro.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.osb.faro.model.FaroUser;
import com.liferay.osb.faro.model.FaroUserModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FaroUser service. Represents a row in the &quot;OSBFaro_FaroUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FaroUserModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FaroUserImpl}.
 * </p>
 *
 * @author Matthew Kong
 * @see FaroUserImpl
 * @generated
 */
public class FaroUserModelImpl
	extends BaseModelImpl<FaroUser> implements FaroUserModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a faro user model instance should use the <code>FaroUser</code> interface instead.
	 */
	public static final String TABLE_NAME = "OSBFaro_FaroUser";

	public static final Object[][] TABLE_COLUMNS = {
		{"faroUserId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createTime", Types.BIGINT}, {"modifiedTime", Types.BIGINT},
		{"liveUserId", Types.BIGINT}, {"roleId", Types.BIGINT},
		{"emailAddress", Types.VARCHAR}, {"key_", Types.VARCHAR},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("faroUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("liveUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("key_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OSBFaro_FaroUser (faroUserId LONG not null primary key,groupId LONG,userId LONG,userName VARCHAR(75) null,createTime LONG,modifiedTime LONG,liveUserId LONG,roleId LONG,emailAddress VARCHAR(75) null,key_ VARCHAR(75) null,status INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table OSBFaro_FaroUser";

	public static final String ORDER_BY_JPQL =
		" ORDER BY faroUser.faroUserId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OSBFaro_FaroUser.faroUserId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.osb.faro.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.osb.faro.model.FaroUser"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.osb.faro.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.osb.faro.model.FaroUser"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.osb.faro.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.osb.faro.model.FaroUser"),
		true);

	public static final long EMAILADDRESS_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long KEY_COLUMN_BITMASK = 4L;

	public static final long LIVEUSERID_COLUMN_BITMASK = 8L;

	public static final long ROLEID_COLUMN_BITMASK = 16L;

	public static final long STATUS_COLUMN_BITMASK = 32L;

	public static final long FAROUSERID_COLUMN_BITMASK = 64L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.osb.faro.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.osb.faro.model.FaroUser"));

	public FaroUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _faroUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFaroUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _faroUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FaroUser.class;
	}

	@Override
	public String getModelClassName() {
		return FaroUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FaroUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FaroUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FaroUser, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((FaroUser)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FaroUser, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FaroUser, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FaroUser)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FaroUser, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FaroUser, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FaroUser>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FaroUser.class.getClassLoader(), FaroUser.class,
			ModelWrapper.class);

		try {
			Constructor<FaroUser> constructor =
				(Constructor<FaroUser>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FaroUser, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FaroUser, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FaroUser, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FaroUser, Object>>();
		Map<String, BiConsumer<FaroUser, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FaroUser, ?>>();

		attributeGetterFunctions.put(
			"faroUserId",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getFaroUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"faroUserId",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(FaroUser faroUser, Object faroUserIdObject) {
					faroUser.setFaroUserId((Long)faroUserIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(FaroUser faroUser, Object groupIdObject) {
					faroUser.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(FaroUser faroUser, Object userIdObject) {
					faroUser.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(FaroUser faroUser, Object userNameObject) {
					faroUser.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createTime",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getCreateTime();
				}

			});
		attributeSetterBiConsumers.put(
			"createTime",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(FaroUser faroUser, Object createTimeObject) {
					faroUser.setCreateTime((Long)createTimeObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedTime",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getModifiedTime();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedTime",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(
					FaroUser faroUser, Object modifiedTimeObject) {

					faroUser.setModifiedTime((Long)modifiedTimeObject);
				}

			});
		attributeGetterFunctions.put(
			"liveUserId",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getLiveUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"liveUserId",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(FaroUser faroUser, Object liveUserIdObject) {
					faroUser.setLiveUserId((Long)liveUserIdObject);
				}

			});
		attributeGetterFunctions.put(
			"roleId",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getRoleId();
				}

			});
		attributeSetterBiConsumers.put(
			"roleId",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(FaroUser faroUser, Object roleIdObject) {
					faroUser.setRoleId((Long)roleIdObject);
				}

			});
		attributeGetterFunctions.put(
			"emailAddress",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getEmailAddress();
				}

			});
		attributeSetterBiConsumers.put(
			"emailAddress",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(
					FaroUser faroUser, Object emailAddressObject) {

					faroUser.setEmailAddress((String)emailAddressObject);
				}

			});
		attributeGetterFunctions.put(
			"key",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getKey();
				}

			});
		attributeSetterBiConsumers.put(
			"key",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(FaroUser faroUser, Object keyObject) {
					faroUser.setKey((String)keyObject);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<FaroUser, Object>() {

				@Override
				public Object apply(FaroUser faroUser) {
					return faroUser.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<FaroUser, Object>() {

				@Override
				public void accept(FaroUser faroUser, Object statusObject) {
					faroUser.setStatus((Integer)statusObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getFaroUserId() {
		return _faroUserId;
	}

	@Override
	public void setFaroUserId(long faroUserId) {
		_faroUserId = faroUserId;
	}

	@Override
	public String getFaroUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getFaroUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setFaroUserUuid(String faroUserUuid) {
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public long getCreateTime() {
		return _createTime;
	}

	@Override
	public void setCreateTime(long createTime) {
		_createTime = createTime;
	}

	@Override
	public long getModifiedTime() {
		return _modifiedTime;
	}

	@Override
	public void setModifiedTime(long modifiedTime) {
		_modifiedTime = modifiedTime;
	}

	@Override
	public long getLiveUserId() {
		return _liveUserId;
	}

	@Override
	public void setLiveUserId(long liveUserId) {
		_columnBitmask |= LIVEUSERID_COLUMN_BITMASK;

		if (!_setOriginalLiveUserId) {
			_setOriginalLiveUserId = true;

			_originalLiveUserId = _liveUserId;
		}

		_liveUserId = liveUserId;
	}

	@Override
	public String getLiveUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getLiveUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setLiveUserUuid(String liveUserUuid) {
	}

	public long getOriginalLiveUserId() {
		return _originalLiveUserId;
	}

	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_columnBitmask |= ROLEID_COLUMN_BITMASK;

		if (!_setOriginalRoleId) {
			_setOriginalRoleId = true;

			_originalRoleId = _roleId;
		}

		_roleId = roleId;
	}

	public long getOriginalRoleId() {
		return _originalRoleId;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@Override
	public String getKey() {
		if (_key == null) {
			return "";
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_columnBitmask |= KEY_COLUMN_BITMASK;

		if (_originalKey == null) {
			_originalKey = _key;
		}

		_key = key;
	}

	public String getOriginalKey() {
		return GetterUtil.getString(_originalKey);
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, FaroUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FaroUser toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FaroUser>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FaroUserImpl faroUserImpl = new FaroUserImpl();

		faroUserImpl.setFaroUserId(getFaroUserId());
		faroUserImpl.setGroupId(getGroupId());
		faroUserImpl.setUserId(getUserId());
		faroUserImpl.setUserName(getUserName());
		faroUserImpl.setCreateTime(getCreateTime());
		faroUserImpl.setModifiedTime(getModifiedTime());
		faroUserImpl.setLiveUserId(getLiveUserId());
		faroUserImpl.setRoleId(getRoleId());
		faroUserImpl.setEmailAddress(getEmailAddress());
		faroUserImpl.setKey(getKey());
		faroUserImpl.setStatus(getStatus());

		faroUserImpl.resetOriginalValues();

		return faroUserImpl;
	}

	@Override
	public int compareTo(FaroUser faroUser) {
		long primaryKey = faroUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FaroUser)) {
			return false;
		}

		FaroUser faroUser = (FaroUser)object;

		long primaryKey = faroUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalLiveUserId = _liveUserId;

		_setOriginalLiveUserId = false;

		_originalRoleId = _roleId;

		_setOriginalRoleId = false;

		_originalEmailAddress = _emailAddress;

		_originalKey = _key;

		_originalStatus = _status;

		_setOriginalStatus = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FaroUser> toCacheModel() {
		FaroUserCacheModel faroUserCacheModel = new FaroUserCacheModel();

		faroUserCacheModel.faroUserId = getFaroUserId();

		faroUserCacheModel.groupId = getGroupId();

		faroUserCacheModel.userId = getUserId();

		faroUserCacheModel.userName = getUserName();

		String userName = faroUserCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			faroUserCacheModel.userName = null;
		}

		faroUserCacheModel.createTime = getCreateTime();

		faroUserCacheModel.modifiedTime = getModifiedTime();

		faroUserCacheModel.liveUserId = getLiveUserId();

		faroUserCacheModel.roleId = getRoleId();

		faroUserCacheModel.emailAddress = getEmailAddress();

		String emailAddress = faroUserCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			faroUserCacheModel.emailAddress = null;
		}

		faroUserCacheModel.key = getKey();

		String key = faroUserCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			faroUserCacheModel.key = null;
		}

		faroUserCacheModel.status = getStatus();

		return faroUserCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FaroUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FaroUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FaroUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FaroUser)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FaroUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FaroUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FaroUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FaroUser)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FaroUser>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _faroUserId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private long _createTime;
	private long _modifiedTime;
	private long _liveUserId;
	private long _originalLiveUserId;
	private boolean _setOriginalLiveUserId;
	private long _roleId;
	private long _originalRoleId;
	private boolean _setOriginalRoleId;
	private String _emailAddress;
	private String _originalEmailAddress;
	private String _key;
	private String _originalKey;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private FaroUser _escapedModel;

}