/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.faro.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.osb.faro.model.FaroPreferences;
import com.liferay.osb.faro.model.FaroPreferencesModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FaroPreferences service. Represents a row in the &quot;OSBFaro_FaroPreferences&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FaroPreferencesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FaroPreferencesImpl}.
 * </p>
 *
 * @author Matthew Kong
 * @see FaroPreferencesImpl
 * @generated
 */
public class FaroPreferencesModelImpl
	extends BaseModelImpl<FaroPreferences> implements FaroPreferencesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a faro preferences model instance should use the <code>FaroPreferences</code> interface instead.
	 */
	public static final String TABLE_NAME = "OSBFaro_FaroPreferences";

	public static final Object[][] TABLE_COLUMNS = {
		{"faroPreferencesId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createTime", Types.BIGINT}, {"modifiedTime", Types.BIGINT},
		{"ownerId", Types.BIGINT}, {"preferences", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("faroPreferencesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ownerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("preferences", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OSBFaro_FaroPreferences (faroPreferencesId LONG not null primary key,groupId LONG,userId LONG,userName VARCHAR(75) null,createTime LONG,modifiedTime LONG,ownerId LONG,preferences STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table OSBFaro_FaroPreferences";

	public static final String ORDER_BY_JPQL =
		" ORDER BY faroPreferences.faroPreferencesId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OSBFaro_FaroPreferences.faroPreferencesId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.osb.faro.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.osb.faro.model.FaroPreferences"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.osb.faro.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.osb.faro.model.FaroPreferences"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.osb.faro.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.osb.faro.model.FaroPreferences"),
		true);

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long OWNERID_COLUMN_BITMASK = 2L;

	public static final long FAROPREFERENCESID_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.osb.faro.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.osb.faro.model.FaroPreferences"));

	public FaroPreferencesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _faroPreferencesId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFaroPreferencesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _faroPreferencesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FaroPreferences.class;
	}

	@Override
	public String getModelClassName() {
		return FaroPreferences.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FaroPreferences, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FaroPreferences, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FaroPreferences, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FaroPreferences)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FaroPreferences, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FaroPreferences, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FaroPreferences)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FaroPreferences, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FaroPreferences, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FaroPreferences>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FaroPreferences.class.getClassLoader(), FaroPreferences.class,
			ModelWrapper.class);

		try {
			Constructor<FaroPreferences> constructor =
				(Constructor<FaroPreferences>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FaroPreferences, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FaroPreferences, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FaroPreferences, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<FaroPreferences, Object>>();
		Map<String, BiConsumer<FaroPreferences, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FaroPreferences, ?>>();

		attributeGetterFunctions.put(
			"faroPreferencesId",
			new Function<FaroPreferences, Object>() {

				@Override
				public Object apply(FaroPreferences faroPreferences) {
					return faroPreferences.getFaroPreferencesId();
				}

			});
		attributeSetterBiConsumers.put(
			"faroPreferencesId",
			new BiConsumer<FaroPreferences, Object>() {

				@Override
				public void accept(
					FaroPreferences faroPreferences,
					Object faroPreferencesIdObject) {

					faroPreferences.setFaroPreferencesId(
						(Long)faroPreferencesIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<FaroPreferences, Object>() {

				@Override
				public Object apply(FaroPreferences faroPreferences) {
					return faroPreferences.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<FaroPreferences, Object>() {

				@Override
				public void accept(
					FaroPreferences faroPreferences, Object groupIdObject) {

					faroPreferences.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<FaroPreferences, Object>() {

				@Override
				public Object apply(FaroPreferences faroPreferences) {
					return faroPreferences.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<FaroPreferences, Object>() {

				@Override
				public void accept(
					FaroPreferences faroPreferences, Object userIdObject) {

					faroPreferences.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<FaroPreferences, Object>() {

				@Override
				public Object apply(FaroPreferences faroPreferences) {
					return faroPreferences.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<FaroPreferences, Object>() {

				@Override
				public void accept(
					FaroPreferences faroPreferences, Object userNameObject) {

					faroPreferences.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createTime",
			new Function<FaroPreferences, Object>() {

				@Override
				public Object apply(FaroPreferences faroPreferences) {
					return faroPreferences.getCreateTime();
				}

			});
		attributeSetterBiConsumers.put(
			"createTime",
			new BiConsumer<FaroPreferences, Object>() {

				@Override
				public void accept(
					FaroPreferences faroPreferences, Object createTimeObject) {

					faroPreferences.setCreateTime((Long)createTimeObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedTime",
			new Function<FaroPreferences, Object>() {

				@Override
				public Object apply(FaroPreferences faroPreferences) {
					return faroPreferences.getModifiedTime();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedTime",
			new BiConsumer<FaroPreferences, Object>() {

				@Override
				public void accept(
					FaroPreferences faroPreferences,
					Object modifiedTimeObject) {

					faroPreferences.setModifiedTime((Long)modifiedTimeObject);
				}

			});
		attributeGetterFunctions.put(
			"ownerId",
			new Function<FaroPreferences, Object>() {

				@Override
				public Object apply(FaroPreferences faroPreferences) {
					return faroPreferences.getOwnerId();
				}

			});
		attributeSetterBiConsumers.put(
			"ownerId",
			new BiConsumer<FaroPreferences, Object>() {

				@Override
				public void accept(
					FaroPreferences faroPreferences, Object ownerIdObject) {

					faroPreferences.setOwnerId((Long)ownerIdObject);
				}

			});
		attributeGetterFunctions.put(
			"preferences",
			new Function<FaroPreferences, Object>() {

				@Override
				public Object apply(FaroPreferences faroPreferences) {
					return faroPreferences.getPreferences();
				}

			});
		attributeSetterBiConsumers.put(
			"preferences",
			new BiConsumer<FaroPreferences, Object>() {

				@Override
				public void accept(
					FaroPreferences faroPreferences, Object preferencesObject) {

					faroPreferences.setPreferences((String)preferencesObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getFaroPreferencesId() {
		return _faroPreferencesId;
	}

	@Override
	public void setFaroPreferencesId(long faroPreferencesId) {
		_faroPreferencesId = faroPreferencesId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public long getCreateTime() {
		return _createTime;
	}

	@Override
	public void setCreateTime(long createTime) {
		_createTime = createTime;
	}

	@Override
	public long getModifiedTime() {
		return _modifiedTime;
	}

	@Override
	public void setModifiedTime(long modifiedTime) {
		_modifiedTime = modifiedTime;
	}

	@Override
	public long getOwnerId() {
		return _ownerId;
	}

	@Override
	public void setOwnerId(long ownerId) {
		_columnBitmask |= OWNERID_COLUMN_BITMASK;

		if (!_setOriginalOwnerId) {
			_setOriginalOwnerId = true;

			_originalOwnerId = _ownerId;
		}

		_ownerId = ownerId;
	}

	public long getOriginalOwnerId() {
		return _originalOwnerId;
	}

	@Override
	public String getPreferences() {
		if (_preferences == null) {
			return "";
		}
		else {
			return _preferences;
		}
	}

	@Override
	public void setPreferences(String preferences) {
		_preferences = preferences;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, FaroPreferences.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FaroPreferences toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FaroPreferences>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FaroPreferencesImpl faroPreferencesImpl = new FaroPreferencesImpl();

		faroPreferencesImpl.setFaroPreferencesId(getFaroPreferencesId());
		faroPreferencesImpl.setGroupId(getGroupId());
		faroPreferencesImpl.setUserId(getUserId());
		faroPreferencesImpl.setUserName(getUserName());
		faroPreferencesImpl.setCreateTime(getCreateTime());
		faroPreferencesImpl.setModifiedTime(getModifiedTime());
		faroPreferencesImpl.setOwnerId(getOwnerId());
		faroPreferencesImpl.setPreferences(getPreferences());

		faroPreferencesImpl.resetOriginalValues();

		return faroPreferencesImpl;
	}

	@Override
	public int compareTo(FaroPreferences faroPreferences) {
		long primaryKey = faroPreferences.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FaroPreferences)) {
			return false;
		}

		FaroPreferences faroPreferences = (FaroPreferences)object;

		long primaryKey = faroPreferences.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalOwnerId = _ownerId;

		_setOriginalOwnerId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FaroPreferences> toCacheModel() {
		FaroPreferencesCacheModel faroPreferencesCacheModel =
			new FaroPreferencesCacheModel();

		faroPreferencesCacheModel.faroPreferencesId = getFaroPreferencesId();

		faroPreferencesCacheModel.groupId = getGroupId();

		faroPreferencesCacheModel.userId = getUserId();

		faroPreferencesCacheModel.userName = getUserName();

		String userName = faroPreferencesCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			faroPreferencesCacheModel.userName = null;
		}

		faroPreferencesCacheModel.createTime = getCreateTime();

		faroPreferencesCacheModel.modifiedTime = getModifiedTime();

		faroPreferencesCacheModel.ownerId = getOwnerId();

		faroPreferencesCacheModel.preferences = getPreferences();

		String preferences = faroPreferencesCacheModel.preferences;

		if ((preferences != null) && (preferences.length() == 0)) {
			faroPreferencesCacheModel.preferences = null;
		}

		return faroPreferencesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FaroPreferences, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FaroPreferences, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FaroPreferences, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FaroPreferences)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FaroPreferences, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FaroPreferences, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FaroPreferences, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FaroPreferences)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FaroPreferences>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _faroPreferencesId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private long _createTime;
	private long _modifiedTime;
	private long _ownerId;
	private long _originalOwnerId;
	private boolean _setOriginalOwnerId;
	private String _preferences;
	private long _columnBitmask;
	private FaroPreferences _escapedModel;

}