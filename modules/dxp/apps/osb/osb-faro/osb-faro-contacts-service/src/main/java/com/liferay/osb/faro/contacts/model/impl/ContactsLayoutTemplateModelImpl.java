/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.faro.contacts.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.osb.faro.contacts.model.ContactsLayoutTemplate;
import com.liferay.osb.faro.contacts.model.ContactsLayoutTemplateModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ContactsLayoutTemplate service. Represents a row in the &quot;OSBFaro_ContactsLayoutTemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ContactsLayoutTemplateModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactsLayoutTemplateImpl}.
 * </p>
 *
 * @author Shinn Lok
 * @see ContactsLayoutTemplateImpl
 * @generated
 */
public class ContactsLayoutTemplateModelImpl
	extends BaseModelImpl<ContactsLayoutTemplate>
	implements ContactsLayoutTemplateModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contacts layout template model instance should use the <code>ContactsLayoutTemplate</code> interface instead.
	 */
	public static final String TABLE_NAME = "OSBFaro_ContactsLayoutTemplate";

	public static final Object[][] TABLE_COLUMNS = {
		{"contactsLayoutTemplateId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createTime", Types.BIGINT}, {"modifiedTime", Types.BIGINT},
		{"headerContactsCardTemplateIds", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"settings_", Types.VARCHAR},
		{"type_", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("contactsLayoutTemplateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("headerContactsCardTemplateIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("settings_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OSBFaro_ContactsLayoutTemplate (contactsLayoutTemplateId LONG not null primary key,groupId LONG,userId LONG,userName VARCHAR(75) null,createTime LONG,modifiedTime LONG,headerContactsCardTemplateIds STRING null,name VARCHAR(75) null,settings_ STRING null,type_ INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table OSBFaro_ContactsLayoutTemplate";

	public static final String ORDER_BY_JPQL =
		" ORDER BY contactsLayoutTemplate.contactsLayoutTemplateId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OSBFaro_ContactsLayoutTemplate.contactsLayoutTemplateId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.osb.faro.contacts.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.osb.faro.contacts.model.ContactsLayoutTemplate"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.osb.faro.contacts.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.osb.faro.contacts.model.ContactsLayoutTemplate"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.osb.faro.contacts.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.osb.faro.contacts.model.ContactsLayoutTemplate"),
		true);

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long TYPE_COLUMN_BITMASK = 2L;

	public static final long CONTACTSLAYOUTTEMPLATEID_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.osb.faro.contacts.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.osb.faro.contacts.model.ContactsLayoutTemplate"));

	public ContactsLayoutTemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contactsLayoutTemplateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContactsLayoutTemplateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contactsLayoutTemplateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContactsLayoutTemplate.class;
	}

	@Override
	public String getModelClassName() {
		return ContactsLayoutTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ContactsLayoutTemplate, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ContactsLayoutTemplate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactsLayoutTemplate, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ContactsLayoutTemplate)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ContactsLayoutTemplate, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ContactsLayoutTemplate, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ContactsLayoutTemplate)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ContactsLayoutTemplate, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ContactsLayoutTemplate, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ContactsLayoutTemplate>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ContactsLayoutTemplate.class.getClassLoader(),
			ContactsLayoutTemplate.class, ModelWrapper.class);

		try {
			Constructor<ContactsLayoutTemplate> constructor =
				(Constructor<ContactsLayoutTemplate>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ContactsLayoutTemplate, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ContactsLayoutTemplate, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ContactsLayoutTemplate, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ContactsLayoutTemplate, Object>>();
		Map<String, BiConsumer<ContactsLayoutTemplate, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<ContactsLayoutTemplate, ?>>();

		attributeGetterFunctions.put(
			"contactsLayoutTemplateId",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.getContactsLayoutTemplateId();
				}

			});
		attributeSetterBiConsumers.put(
			"contactsLayoutTemplateId",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object contactsLayoutTemplateIdObject) {

					contactsLayoutTemplate.setContactsLayoutTemplateId(
						(Long)contactsLayoutTemplateIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object groupIdObject) {

					contactsLayoutTemplate.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object userIdObject) {

					contactsLayoutTemplate.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object userNameObject) {

					contactsLayoutTemplate.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createTime",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.getCreateTime();
				}

			});
		attributeSetterBiConsumers.put(
			"createTime",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object createTimeObject) {

					contactsLayoutTemplate.setCreateTime(
						(Long)createTimeObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedTime",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.getModifiedTime();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedTime",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object modifiedTimeObject) {

					contactsLayoutTemplate.setModifiedTime(
						(Long)modifiedTimeObject);
				}

			});
		attributeGetterFunctions.put(
			"headerContactsCardTemplateIds",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.
						getHeaderContactsCardTemplateIds();
				}

			});
		attributeSetterBiConsumers.put(
			"headerContactsCardTemplateIds",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object headerContactsCardTemplateIdsObject) {

					contactsLayoutTemplate.setHeaderContactsCardTemplateIds(
						(String)headerContactsCardTemplateIdsObject);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object nameObject) {

					contactsLayoutTemplate.setName((String)nameObject);
				}

			});
		attributeGetterFunctions.put(
			"settings",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.getSettings();
				}

			});
		attributeSetterBiConsumers.put(
			"settings",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object settingsObject) {

					contactsLayoutTemplate.setSettings((String)settingsObject);
				}

			});
		attributeGetterFunctions.put(
			"type",
			new Function<ContactsLayoutTemplate, Object>() {

				@Override
				public Object apply(
					ContactsLayoutTemplate contactsLayoutTemplate) {

					return contactsLayoutTemplate.getType();
				}

			});
		attributeSetterBiConsumers.put(
			"type",
			new BiConsumer<ContactsLayoutTemplate, Object>() {

				@Override
				public void accept(
					ContactsLayoutTemplate contactsLayoutTemplate,
					Object typeObject) {

					contactsLayoutTemplate.setType((Integer)typeObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getContactsLayoutTemplateId() {
		return _contactsLayoutTemplateId;
	}

	@Override
	public void setContactsLayoutTemplateId(long contactsLayoutTemplateId) {
		_contactsLayoutTemplateId = contactsLayoutTemplateId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public long getCreateTime() {
		return _createTime;
	}

	@Override
	public void setCreateTime(long createTime) {
		_createTime = createTime;
	}

	@Override
	public long getModifiedTime() {
		return _modifiedTime;
	}

	@Override
	public void setModifiedTime(long modifiedTime) {
		_modifiedTime = modifiedTime;
	}

	@Override
	public String getHeaderContactsCardTemplateIds() {
		if (_headerContactsCardTemplateIds == null) {
			return "";
		}
		else {
			return _headerContactsCardTemplateIds;
		}
	}

	@Override
	public void setHeaderContactsCardTemplateIds(
		String headerContactsCardTemplateIds) {

		_headerContactsCardTemplateIds = headerContactsCardTemplateIds;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getSettings() {
		if (_settings == null) {
			return "";
		}
		else {
			return _settings;
		}
	}

	@Override
	public void setSettings(String settings) {
		_settings = settings;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ContactsLayoutTemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactsLayoutTemplate toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ContactsLayoutTemplate>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactsLayoutTemplateImpl contactsLayoutTemplateImpl =
			new ContactsLayoutTemplateImpl();

		contactsLayoutTemplateImpl.setContactsLayoutTemplateId(
			getContactsLayoutTemplateId());
		contactsLayoutTemplateImpl.setGroupId(getGroupId());
		contactsLayoutTemplateImpl.setUserId(getUserId());
		contactsLayoutTemplateImpl.setUserName(getUserName());
		contactsLayoutTemplateImpl.setCreateTime(getCreateTime());
		contactsLayoutTemplateImpl.setModifiedTime(getModifiedTime());
		contactsLayoutTemplateImpl.setHeaderContactsCardTemplateIds(
			getHeaderContactsCardTemplateIds());
		contactsLayoutTemplateImpl.setName(getName());
		contactsLayoutTemplateImpl.setSettings(getSettings());
		contactsLayoutTemplateImpl.setType(getType());

		contactsLayoutTemplateImpl.resetOriginalValues();

		return contactsLayoutTemplateImpl;
	}

	@Override
	public int compareTo(ContactsLayoutTemplate contactsLayoutTemplate) {
		long primaryKey = contactsLayoutTemplate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ContactsLayoutTemplate)) {
			return false;
		}

		ContactsLayoutTemplate contactsLayoutTemplate =
			(ContactsLayoutTemplate)object;

		long primaryKey = contactsLayoutTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalType = _type;

		_setOriginalType = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactsLayoutTemplate> toCacheModel() {
		ContactsLayoutTemplateCacheModel contactsLayoutTemplateCacheModel =
			new ContactsLayoutTemplateCacheModel();

		contactsLayoutTemplateCacheModel.contactsLayoutTemplateId =
			getContactsLayoutTemplateId();

		contactsLayoutTemplateCacheModel.groupId = getGroupId();

		contactsLayoutTemplateCacheModel.userId = getUserId();

		contactsLayoutTemplateCacheModel.userName = getUserName();

		String userName = contactsLayoutTemplateCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contactsLayoutTemplateCacheModel.userName = null;
		}

		contactsLayoutTemplateCacheModel.createTime = getCreateTime();

		contactsLayoutTemplateCacheModel.modifiedTime = getModifiedTime();

		contactsLayoutTemplateCacheModel.headerContactsCardTemplateIds =
			getHeaderContactsCardTemplateIds();

		String headerContactsCardTemplateIds =
			contactsLayoutTemplateCacheModel.headerContactsCardTemplateIds;

		if ((headerContactsCardTemplateIds != null) &&
			(headerContactsCardTemplateIds.length() == 0)) {

			contactsLayoutTemplateCacheModel.headerContactsCardTemplateIds =
				null;
		}

		contactsLayoutTemplateCacheModel.name = getName();

		String name = contactsLayoutTemplateCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			contactsLayoutTemplateCacheModel.name = null;
		}

		contactsLayoutTemplateCacheModel.settings = getSettings();

		String settings = contactsLayoutTemplateCacheModel.settings;

		if ((settings != null) && (settings.length() == 0)) {
			contactsLayoutTemplateCacheModel.settings = null;
		}

		contactsLayoutTemplateCacheModel.type = getType();

		return contactsLayoutTemplateCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ContactsLayoutTemplate, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ContactsLayoutTemplate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactsLayoutTemplate, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ContactsLayoutTemplate)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ContactsLayoutTemplate, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ContactsLayoutTemplate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactsLayoutTemplate, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((ContactsLayoutTemplate)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ContactsLayoutTemplate>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _contactsLayoutTemplateId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private long _createTime;
	private long _modifiedTime;
	private String _headerContactsCardTemplateIds;
	private String _name;
	private String _settings;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private long _columnBitmask;
	private ContactsLayoutTemplate _escapedModel;

}